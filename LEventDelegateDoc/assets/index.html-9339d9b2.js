import{_ as e,a,b as r,c as d,d as n,e as l,f as i,g as s,h as o,i as c,j as p,k as g,l as m,m as _,n as h,o as v,p as y,q as E,r as u,s as D,t as f,u as t,v as x,w as L,x as b,y as F}from"./25-e4f8884f.js";import{_ as I,o as M,c as A,a as T}from"./app-a4626972.js";const C={},U=T('<h1 id="leventdelegate" tabindex="-1"><a class="header-anchor" href="#leventdelegate" aria-hidden="true">#</a> LEventDelegate</h1><p><strong>注意!!!</strong> LEventDelegate是LGUI插件的一个独立模块，如果您已经有了LGUI插件，那么就不需要再买LEventDelegate！</p><p>LEventDelegate (Lex-EventDelegate) 是个回调事件工具（当事件触发的时候执行方法），可以在物体的“Details”栏中编辑并且序列化为asset，用法就和Unity的UnityEvent类似。</p><h2 id="如何使用" tabindex="-1"><a class="header-anchor" href="#如何使用" aria-hidden="true">#</a> 如何使用</h2><h3 id="空参数的leventdelegate" tabindex="-1"><a class="header-anchor" href="#空参数的leventdelegate" aria-hidden="true">#</a> 空参数的LEventDelegate</h3><p>创建个ActorComponent蓝图，命名为“MyLEventDelegateTest”，我们将在这个组件中创建LEventDelegate并使用： <img src="'+e+'" alt=""></p><p>双击“MyLEventDelegateTest”打开蓝图编辑器，创建个变量类型为“LEventDelegateEmpty”，命名为“MyEvent”，勾选&quot;InstanceEditable&quot;，编译蓝图：<br><img src="'+a+'" alt=""></p><p>创建另一个ActorComponent蓝图，命名为&quot;FunctionComponent&quot;，我们将在这个组件中创建个方法用于LEventDelegate调用：<br><img src="'+r+'" alt=""></p><p>双击FunctionComponent打开蓝图编辑器，添加个函数“TestFunction”，添加个类型为String的输入参数，连接个“Print String”节点，编译蓝图： <img src="'+d+'" alt=""></p><p>创建两个Actor分别命名为“A”和“B”： <img src="'+n+'" alt=""></p><p>给A添加MyLEventDelegateTest组件，给B添加FunctionComponent组件： <img src="'+l+'" alt=""><img src="'+i+'" alt=""></p><p>选择A上的MyLEventDelegateTest组件，在“Details”面板里可以看到刚才创建的“My Event()”的LEventDelegate，点击“+”按钮来添加一个事件： <img src="'+s+'" alt=""></p><p>保持MyLEventDelegateTest组件选中，然后点击“Details”面板的锁按钮来锁住选择： <img src="'+o+'" alt=""></p><p>把B拖拽到事件参数里： <img src="'+c+'" alt=""></p><p>点击事件参数里的组件区域，这里会列出所有可用的组件和Actor自身“(ActorSelf)”，选择“Function”组件，因为我们的“TestFunction”函数在FunctionComponent组件里： <img src="'+p+'" alt=""></p><p>点击事件参数里的方法区域，这里会列出所有可用的方法，选择我们刚才创建的“TestFunction(String)”： <img src="'+g+'" alt=""></p><p>参数区域现在显示为字符输入框，当我们执行“MyEvent()”事件的时候，我们在这里输入的字符将会转为参数并传给目标函数。你可以输入任何内容，例如我们在这里输入“I am function parameter”： <img src="'+m+'" alt=""></p><p>现在这个事件已经设置完成了，下一步就是执行它了。双击MyLEventDelegateTest组件，在蓝图编辑器里把“MyEvent”变量拖到EventGraph，然后从“MyEvent”节点拖出并连接“Execute”节点： <img src="'+_+'" alt=""></p><p>添加个“Delay”节点并设置“Duration”为0.5，编译蓝图： <img src="'+h+'" alt=""></p><p>点击运行，可以看到打印的字符信息“I am function parameter”显示在屏幕左上方： <img src="'+v+'" alt=""></p><h3 id="有参数的leventdelegate" tabindex="-1"><a class="header-anchor" href="#有参数的leventdelegate" aria-hidden="true">#</a> 有参数的LEventDelegate</h3><p>实际上大部分情况下我们都想通过事件来传递参数，LEventDelegate也可以做到，我们来试试。 在蓝图编辑器里打开MyLEventDelegateTest，修改“MyEvent”类型为LEventDelegateString： <img src="'+y+'" alt=""></p><p>改完之后“Execute”节点显示为出错因为参数不匹配： <img src="'+E+'" alt=""></p><p>我们可以用另一个带string参数的“Execute”节点。打断错误节点并删除“Execute”节点，然后从“MyEvent”节点拖出线并再次选择“Execute”，这次“Execute”节点就有string参数了： <img src="'+u+'" alt=""></p><p>在“In Parameter”中输入“I am native function parameter”： <img src="'+D+'" alt=""></p><p>在A上选择MyLEventDelegateTest组件，在“MyEvent”中点击“+”按钮来添加事件，然后把B拖到事件参数中的actor区域，然后在组件区域中选择“Function”组件： <img src="'+f+'" alt=""></p><p>点击函数区域，你可以看到有两个名为“TestFunction”的函数，带有“NativeParameter”的函数可以传递事件的参数，所以我们选择它： <img src="'+t+'" alt=""></p><p>你可以看到事件的参数区域显示个文字“NativeParameter”： <img src="'+x+'" alt=""></p><p>点击运行，可以看到打印的字符信息“I am native function parameter”显示在屏幕的左上方： <img src="'+L+'" alt=""></p><p>LEventDelegate支持很多基础数据类型，下面列表中都是。你可以通过使用LEventDelegateXXX来使用这些类型（比如 LEventDelegateString、LEventDelegateBool）：</p><table><thead><tr><th>名字</th><th>描述</th></tr></thead><tbody><tr><td>Empty</td><td>空参数</td></tr><tr><td>Bool</td><td>布尔值</td></tr><tr><td>Float</td><td>单精度浮点小数</td></tr><tr><td>Double</td><td>双精度浮点小数</td></tr><tr><td>Int8</td><td>8位整数 (c++ only)</td></tr><tr><td>UInt8</td><td>无符号的8位整数 (also for enum and byte type)</td></tr><tr><td>Int16</td><td>16位整数 (c++ only)</td></tr><tr><td>UInt16</td><td>无符号16位整数 (c++ only)</td></tr><tr><td>Int32</td><td>32位整数</td></tr><tr><td>UInt32</td><td>无符号32位整数 (c++ only)</td></tr><tr><td>Int64</td><td>64位整数 (c++ only)</td></tr><tr><td>UInt64</td><td>无符号64位整数 (c++ only)</td></tr><tr><td>Vector2</td><td>2D 向量，双精度</td></tr><tr><td>Vector3</td><td>3D 向量，双精度</td></tr><tr><td>Vector4</td><td>4D 向量，双精度</td></tr><tr><td>Color</td><td>4字节颜色值，rgba每个通道使用1字节</td></tr><tr><td>LinearColor</td><td>16字节颜色值，rgba每个通道使用4字节的单精度浮点小数</td></tr><tr><td>Quaternion</td><td>表示旋转的四元素，即c++中的FQuat</td></tr><tr><td>Rotator</td><td>表示旋转的Rotator</td></tr><tr><td>Name</td><td>即c++中的FName</td></tr><tr><td>Text</td><td>即c++中的FText</td></tr><tr><td>String</td><td>即c++中的FString</td></tr><tr><td>Object</td><td>代表任何UObject，大部分时候用于资源引用</td></tr><tr><td>Actor</td><td>场景中的Actor引用</td></tr><tr><td>Class</td><td>UClass引用</td></tr></tbody></table><p>如果你使用LEventDelegateXXX，当你从函数列表中选择时，你可以看到一些函数带有“(NativeParameter)”（比如 TestFunction(NativeParameter)）： <img src="'+t+'" alt=""> 这就代表这个函数可以接收从LEventDelegate传入的参数。</p><h3 id="运行时注册事件" tabindex="-1"><a class="header-anchor" href="#运行时注册事件" aria-hidden="true">#</a> 运行时注册事件</h3><p>你在用LEventDelegate的时候也可以传统一点的方式比如注册或注销（Register/Unregister）： <img src="'+b+'" alt=""></p><h2 id="额外说明" tabindex="-1"><a class="header-anchor" href="#额外说明" aria-hidden="true">#</a> 额外说明</h2><p>当设置好LEventDelegate并调用的时候，它会在目标Actor上找到接收事件的物体（接收事件的物体可以是Actor自身或Actor的Component），根据参数和函数名找到适配的函数，然后调用函数。并且LEventDelegate有内置的缓存，就是说只有在第一次执行函数的时候才会有这些搜索工作，后面就是直接执行了。</p><h2 id="功能按钮" tabindex="-1"><a class="header-anchor" href="#功能按钮" aria-hidden="true">#</a> 功能按钮</h2><p>每个事件元素都有些功能按钮： <img src="'+F+'" alt=""></p><table><thead><tr><th style="text-align:left;">名字</th><th style="text-align:left;">功能</th></tr></thead><tbody><tr><td style="text-align:left;">C</td><td style="text-align:left;">复制这个事件元素到内存中</td></tr><tr><td style="text-align:left;">P</td><td style="text-align:left;">把内存中复制的事件元素粘贴到当前这个事件元素上</td></tr><tr><td style="text-align:left;">D</td><td style="text-align:left;">复制这个事件元素为一个新的事件元素</td></tr><tr><td style="text-align:left;">+</td><td style="text-align:left;">在当前这个事件元素后面添加一个新的事件元素</td></tr><tr><td style="text-align:left;">-</td><td style="text-align:left;">删除当前这个事件元素</td></tr><tr><td style="text-align:left;">▲</td><td style="text-align:left;">把当前这个事件元素往上移一位</td></tr><tr><td style="text-align:left;">▼</td><td style="text-align:left;">把当前这个事件元素往下移一位</td></tr></tbody></table><h2 id="已知限制" tabindex="-1"><a class="header-anchor" href="#已知限制" aria-hidden="true">#</a> 已知限制</h2><ul><li>不支持Actor蓝图中的组件中使用。</li><li>目前只支持一个参数或没有参数。</li></ul>',41),S=[U];function B(N,P){return M(),A("div",null,S)}const V=I(C,[["render",B],["__file","index.html.vue"]]);export{V as default};
