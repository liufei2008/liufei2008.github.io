{
  "index.html": {
    "href": "index.html",
    "title": "LGUI Mannual | LGUI Documentation",
    "keywords": "LGUI Mannual These pages contain information about how to use LGUI. Sections Get started Start to use LGUI, component based workflow Sample Projects Introduce sample projects, and download these projects from github UI elements and controls How to use LGUI's element and controls Layout Use Layout to control location and size of UI LGUIPrefab Use LGUIPrefab workflow LGUIPointerEvent LGUIPointerEvent for UI interaction LGUIDrawableEvent Introduce how to use LGUIDrawableEvent InputModule Input module LTween LTween for tween animation"
  },
  "GetStarted/Prefab/index.html": {
    "href": "GetStarted/Prefab/index.html",
    "title": "Prefab workflow | LGUI Documentation",
    "keywords": "Prefab workflow In this section, we will learn how to use LGUIPrefab to reuse our UI content. 1. Prepare a LGUI ScreenSpaceUI. Follow the HelloWorld section to create a base ScreenSpaceUI. 2. Create a button as prefab source. Select \"ScreenSpaceUIRoot\" actor, right click on the down arrow button, and choose \"Create UI Element\"->\"Button\": Rename the button actor to \"MyPrefabButton\", set \"AnchorOffsetY\" to -100, \"Color\" to green: 3. Create prefab. Select \"MyPrefabButton\" actor, right click on the down arrow button, and choose \"Create Prefab\": Now a save file window will showup: Click \"Save\" or \"保存\" button, then a prefab asset will appear in \"Content\" folder: And notice the \"MyPrefabButton\" actor in the \"World Outliner\", the down arrow button icon become a prefab icon, and a temp prefab actor will appear in \"--LGUIPrefabActor--\" folder: Select \"MyPrefabButton\" actor, right click on the prefab icon and choose \"Destroy Actors\": Notice the \"MyPrefabButton\" actor and it's children are all destroyed, and the \"--LGUIPrefabActor--\" folder become empty: 4. Reuse prefab in editor. Select \"ScreenSpaceUIRoot\" actor, drag \"MyPrefabButton_Prefab\" asset and drop to anywhre on viewport: See a \"MyPrefabButton\" actor is created in viewport and world outliner: Select \"Info\" actor, drag \"MyPrefabButton_Prefab\" asset and drop to anywhre on viewport, then a new \"MyPrefabButton\" will be created (you may need to move it off to see in viewport): Notice different prefab have different color on prefab icon: Select both \"MyPrefabButton\" actor by hold \"Ctrl\" key and click it: Choose \"LGUI Tools\"->\"Destroy Actors\" to destroy both actors and all it's children: 5. Reuse prefab in runtime. Right click in empty area of \"Content\" and choose \"Blueprints\"->\"BlueprintClass\": Select \"Actor Component\": Name the created ActorComponent class to \"PrefabLoader\": Double click \"PrefabLoader\" to open blueprint editor: Drag out \"Event Begin Play\" and add a \"Load Prefab\" node: Drag \"MyPrefabButton_Prefab\" to \"In Prefab\" of \"Load Prefab\" node: Connect \"Get Owner\" and \"Root Component\" node to \"In Parent\" of \"Load Prefab\" node: Click \"Compile\" and then close the blueprint editor: Select \"ScreenSpaceUIRoot\" actor in \"World Outliner\", and drag \"PrefabLoader\" to it's component stack: Hit play, notice a prefab button is created: Notice the button's color become white, because it is override by UIButton component, now let's modify the prefab to fix it. 6. Modify prefab. Exit play mode by click stop button. Select \"ScreenSpaceUIRoot\" actor, drag \"MyPrefabButton_Prefab\" to viewport, so that will create the prefab instance. Select \"MyPrefabButton\" actor, select \"UIButton\" component. UIButton use \"ColorTint\" on \"Transition\" property, it will override the TransitionActor's color with \"Normal Color\": Change the \"Normal Color\" to red, notice the button in viewport become red too: Right click on the prefab icon, and choose \"Apply Prefab\", so that the prefab asset is modified: Right click on the prefab icon, and choose \"Delete This Prefab Instance\", that will delete the prefab instance: Now hit play, see the loaded button have a red color: See Prev LGUIFont | MainPage"
  },
  "GetStarted/index.html": {
    "href": "GetStarted/index.html",
    "title": "Get started with LGUI | LGUI Documentation",
    "keywords": "Get started with LGUI Sections Install Install from marketplace or github HelloWorld All start from \"Hello World\" CustomButton Customize our button use UISprite and UIText UIFont Create custom font Prefab Use prefab to store UI as asset, and reuse it"
  },
  "GetStarted/CustomButton/index.html": {
    "href": "GetStarted/CustomButton/index.html",
    "title": "Custom Button | LGUI Documentation",
    "keywords": "Custom Button In this section, we will learn how to customize our button using UISprite. Before this, you should follow HelloWorld section to create a default button. The default button is a little ugly, we can use a nicer looking texture instead. 1. Prepare a sprite texture. Use photoshop or any other app to create a image, or use this image: Drag the image to UE4 content folder, name it to \"Button\": 2. Create UISpriteData. Select \"Button\" asset, right click on it and choose \"LGUISprite\"->\"Create Sprite\": Then a LGUISpriteData asset named \"Button_Sprite\" will be created: Double click on \"Button_Sprite\" and open a UISpriteDataEditor: Change \"Border Left\" and \"Border Top\" to 14, \"Border Right\" and \"Border Bottom\" to 15: Close the UISpriteDataEditor. 3. Prepare a LGUI ScreenSpaceUI. Follow the HelloWorld section to create a base ScreenSpaceUI: 4. Create UISprite and UIText. Select \"ScreenSpaceUIRoot\" actor, right click on the arrow button and choose \"Create UI Element\"->\"UISprite\", this will create a UISprite actor: Rename the created UISprite actor to \"MyButton\": Select \"MyButton\" actor, drag \"Button_Sprite\" asset to \"Sprite\" property, see the change in viewport: Select \"MyButton\" actor, right click on the arrow and choose \"Create UI Element\"->\"UIText\", this will create a UIText actor: Rename the created UIText actor to \"MyButtonText\", and change \"Depth\" to 1, \"Color\" to black, \"Text\" to \"I'm a button\", \"Size\" to 24, \"Font Style\" to \"Bold\": 5. Adjust button size. Select \"MyButton\" actor, change \"Width\" to 240, \"Height\" to 60: Select \"MyButtonText\" actor, click on the down arrow in \"Anchors\", then a AnchorSelector will popup: Hold \"Ctrl\" button on keyboard and click the right bottom button in AchorSelector, see change in viewport: 6. Add UIButton component. Select \"MyButton\" actor, click \"+Add Component\" and add a \"UIButton\" component: Select \"UIButton\" component you just created, change the \"Transition\" to \"ColorTint\": Click on the left arrow of \"Transition\", this will expand the transition area: Drag \"MyButton\" actor to \"Transition Actor\": 7. Enable RaycastTarget. Select \"MyButton\" actor, select \"UISprite(Inherited)\" component, click \"Show Advanced\" arrow button: Check \"Raycast Target\" property: 8. Add button event: Select \"MyButton\" actor, select \"UIButton\" component, find the \"On Click()\" property and click the \"+\" button: Set the event like this: 9. Play and click the button Now hit play and move your mouse over the button, then click the button, see the change in viewport: See Prev HelloWorld | See Next LGUIFont | MainPage"
  },
  "GetStarted/Font/index.html": {
    "href": "GetStarted/Font/index.html",
    "title": "Use custom font | LGUI Documentation",
    "keywords": "Use custom font In this section, we will use a custom font file(ttf, ttc, otf) to create our UIText. 1. Prepare a font file. LGUI use freetype to render fonts, so we will use freetype supported format(ttf, ttc, otf). Download a font file or grab one from system fonts directory. I use \"华文新魏\" from C:/Windows/Fonts: Copy the font file to your UE4 project directory (same directory of the .uproject file). 2. Create LGUI Font asset. Right click on the empty area of your content folder, choose \"LGUI\"->\"LGUIFont\", that will create LGUIFont asset: Rename the asset to MyLGUIFont: Double click it to open font editor window, click the \"...\" after \"FontSourceFile\" property, and choose the font file you just prepared: 3. Create UIText. Follow the HelloWorld section to create a base screen space UI. Select \"ScreenSpaceUIRoot\", and right click the down arrow, choose \"Create UI Element\"->\"UIText\": Rename the UIText you just created to \"MyUIText\": 4. Change UIText property. Select \"MyUIText\", change \"Anchor Offset Y\" to -150, so it will move down a little bit in viewport: Select \"MyUIText\", change \"Size\" to 40, \"Color\" to black, type in \"中国智造\" in the \"Text\": 5. Use our own font. The important part , select \"MyUIText\" and drag \"MyLGUIFont\" to the \"Font\" property, see the font change in viewport: See Prev HelloWorld | See Next Prefab | MainPage"
  },
  "SampleProjects/index.html": {
    "href": "SampleProjects/index.html",
    "title": "Sample Projects | LGUI Documentation",
    "keywords": "Sample Projects CarCustomization Download/Clone from github . This is a car customization project. Features: Screen Space 3D UI World Space 3D UI UI animation Tutorial Projects Download/Clone from github . This project contains several maps that shows some key features of LGUI. Features: DragDrop Layout Prefab Controller input Si-fi UI Download/Clone from github ."
  },
  "GetStarted/HelloWorld/index.html": {
    "href": "GetStarted/HelloWorld/index.html",
    "title": "Create First UI | LGUI Documentation",
    "keywords": "Create First UI In this section, we will create a simple \"Hello World\" UI step by step. 1. Create Screen Space UI: Create a new default level, click \"LGUI Tools\"->\"Basic Setup\"->\"Screen Space UI\": Then a preset screen space UI should appear: 2. Create a button. Select ScreenSpaceUIRoot, right click on the down arrow in the \"LGUI\" column: Click \"Create UI Element\"->\"UIButton\": Then a button will appear in viewport and world outliner: 3. Adjust button. Select \"Button\" in WorldOutliner, change the \"Anchor Offset Y\" to -120, this will move the button a little off the center: 4. Add OnClick event. Select \"UIButton\" component on \"Button\" actor, find \"On Click()\" property and click the \"+\" button: The \"On Click\" is a LGUIDrawableEvent (see LGUIDrawableEvent page), it has four parameters(Actor, Component, Function, Parameter): In \"Actor\" parameter, select \"Info\" object from World Outliner: Click \"Component\" area and select \"UITextComponent\": Click \"Function\" area and select \"SetText(String)\": Now the \"Parameter\" area become a text input block, type in \"Hello LGUI\": 5. Hit Play, then move you mouse to the button, you will see it highlighted: Then click the button, you will see the text change: See Prev Install | See Next CustomButton | MainPage"
  },
  "UIElementsAndControls/index.html": {
    "href": "UIElementsAndControls/index.html",
    "title": "UI Elements and Controls | LGUI Documentation",
    "keywords": "UI Elements and Controls UI Elements UIContainer UIContainer is an empty container UISprite UISprite use packed atlas texture to render images/icons, good for drawcall UITexture UITexture can render large texture UIText UIText for text display UI Controls Button Use UIButton to trigger event TextInput Use UITextInput to type text SliderAndScrollbar UISlider and UIScrollbar ScrollView Create a scroll view list Toggle UIToggle and UIToggleGroup UI Extension Elements UIRing UIRing UIPolygon UIPolygon UIPolygonLine UIPolygonLine UI2DLine UI2DLine UI Post Process UIBackgroundBlur UIBackgroundBlur UIBackgroundPixelate UIBackgroundPixelate"
  },
  "GetStarted/Install/index.html": {
    "href": "GetStarted/Install/index.html",
    "title": "Install | LGUI Documentation",
    "keywords": "Install 1. Install from UE4 MarketPlace (full source code). Visit page https://www.unrealengine.com/marketplace/en-US/product/lgui-lex-gui-3d-ui-system-for-ue4 : After install complete, create an empty project. Open plugins menu and check LGUI \"Enabled\" (restart engine may needed). 2. Get trial version from github (no source code). Visit page https://github.com/liufei2008/LGUI--trail-version-package : Click left top branch button and choose your desired UnrealEngine version: Then click \"Download ZIP\" button: Create an empty project(trial version only support Blueprint project). In the project folder, create \"Plugins\" folder, and unzip the zip file you just downloaded in the \"Plugins\" folder. Should be like this: 3. If LGUI is installed correctly, then a \"LGUI Tools\" button should appear on the menu bar:** See Next HelloWorld | MainPage"
  }
}