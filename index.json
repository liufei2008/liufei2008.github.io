{
  "Manual/GetStarted/HelloWorld/index.html": {
    "href": "Manual/GetStarted/HelloWorld/index.html",
    "title": "Create First UI | LGUI Documentation",
    "keywords": "Create First UI In this section, we will create a simple \"Hello World\" UI step by step. 1. Create Screen Space UI: Create a new default level, click \"LGUI Tools\"->\"Basic Setup\"->\"Screen Space UI\": Then a preset screen space UI should appear: 2. Create a button. Select ScreenSpaceUIRoot, right click on the down arrow in the \"LGUI\" column: Click \"Create UI Element\"->\"UIButton\": Then a button will appear in viewport and world outliner: 3. Adjust button. Select \"Button\" in WorldOutliner, change the \"Anchor Offset Y\" to -120, this will move the button a little off the center: 4. Add OnClick event. Select \"UIButton\" component on \"Button\" actor, find \"On Click()\" property and click the \"+\" button: The \"On Click\" is a LGUIDrawableEvent (see LGUIDrawableEvent page), it has four parameters(Actor, Component, Function, Parameter): In \"Actor\" parameter, select \"Info\" object from World Outliner: Click \"Component\" area and select \"UITextComponent\": Click \"Function\" area and select \"SetText(String)\": Now the \"Parameter\" area become a text input block, type in \"Hello LGUI\": 5. Hit Play, then move you mouse to the button, you will see it highlighted: Then click the button, you will see the text change: See Prev Install | See Next CustomButton | MainPage"
  },
  "Manual/GetStarted/Install/index.html": {
    "href": "Manual/GetStarted/Install/index.html",
    "title": "Install | LGUI Documentation",
    "keywords": "Install 1. Install from UE4 MarketPlace (full source code). Visit page https://www.unrealengine.com/marketplace/en-US/product/lgui-lex-gui-3d-ui-system-for-ue4 : After install complete, create an empty project. Open plugins menu and check LGUI \"Enabled\" (restart engine may needed). 2. Get trial version from github (no source code). Visit page https://github.com/liufei2008/LGUI--trail-version-package : Click left top branch button and choose your desired UnrealEngine version: Then click \"Download ZIP\" button: Create an empty project(trial version only support Blueprint project). In the project folder, create \"Plugins\" folder, and unzip the zip file you just downloaded in the \"Plugins\" folder. Should be like this: 3. If LGUI is installed correctly, then a \"LGUI Tools\" button should appear on the menu bar:** See Next HelloWorld | MainPage"
  },
  "Manual/GetStarted/Prefab/index.html": {
    "href": "Manual/GetStarted/Prefab/index.html",
    "title": "Prefab workflow | LGUI Documentation",
    "keywords": "Prefab workflow In this section, we will learn how to use LGUIPrefab to reuse our UI content. 1. Prepare a LGUI ScreenSpaceUI. Follow the HelloWorld section to create a base ScreenSpaceUI. 2. Create a button as prefab source. Select \"ScreenSpaceUIRoot\" actor, right click on the down arrow button, and choose \"Create UI Element\"->\"Button\": Rename the button actor to \"MyPrefabButton\", set \"AnchorOffsetY\" to -100, \"Color\" to green: 3. Create prefab. Select \"MyPrefabButton\" actor, right click on the down arrow button, and choose \"Create Prefab\": Now a save file window will showup: Click \"Save\" or \"保存\" button, then a prefab asset will appear in \"Content\" folder: And notice the \"MyPrefabButton\" actor in the \"World Outliner\", the down arrow button icon become a prefab icon, and a temp prefab actor will appear in \"--LGUIPrefabActor--\" folder: Select \"MyPrefabButton\" actor, right click on the prefab icon and choose \"Destroy Actors\": Notice the \"MyPrefabButton\" actor and it's children are all destroyed, and the \"--LGUIPrefabActor--\" folder become empty: 4. Reuse prefab in editor. Select \"ScreenSpaceUIRoot\" actor, drag \"MyPrefabButton_Prefab\" asset and drop to anywhre on viewport: See a \"MyPrefabButton\" actor is created in viewport and world outliner: Select \"Info\" actor, drag \"MyPrefabButton_Prefab\" asset and drop to anywhre on viewport, then a new \"MyPrefabButton\" will be created (you may need to move it off to see in viewport): Notice different prefab have different color on prefab icon: Select both \"MyPrefabButton\" actor by hold \"Ctrl\" key and click it: Choose \"LGUI Tools\"->\"Destroy Actors\" to destroy both actors and all it's children: 5. Reuse prefab in runtime. Right click in empty area of \"Content\" and choose \"Blueprints\"->\"BlueprintClass\": Select \"Actor Component\": Name the created ActorComponent class to \"PrefabLoader\": Double click \"PrefabLoader\" to open blueprint editor: Drag out \"Event Begin Play\" and add a \"Load Prefab\" node: Drag \"MyPrefabButton_Prefab\" to \"In Prefab\" of \"Load Prefab\" node: Connect \"Get Owner\" and \"Root Component\" node to \"In Parent\" of \"Load Prefab\" node: Click \"Compile\" and then close the blueprint editor: Select \"ScreenSpaceUIRoot\" actor in \"World Outliner\", and drag \"PrefabLoader\" to it's component stack: Hit play, notice a prefab button is created: Notice the button's color become white, because it is override by UIButton component, now let's modify the prefab to fix it. 6. Modify prefab. Exit play mode by click stop button. Select \"ScreenSpaceUIRoot\" actor, drag \"MyPrefabButton_Prefab\" to viewport, so that will create the prefab instance. Select \"MyPrefabButton\" actor, select \"UIButton\" component. UIButton use \"ColorTint\" on \"Transition\" property, it will override the TransitionActor's color with \"Normal Color\": Change the \"Normal Color\" to red, notice the button in viewport become red too: Right click on the prefab icon, and choose \"Apply Prefab\", so that the prefab asset is modified: Right click on the prefab icon, and choose \"Delete This Prefab Instance\", that will delete the prefab instance: Now hit play, see the loaded button have a red color: See Prev LGUIFont | MainPage"
  },
  "index.html": {
    "href": "index.html",
    "title": "LGUI Documentation | LGUI Documentation",
    "keywords": "LGUI Documentation Manual Learn how to use LGUI in UnrealEngine"
  },
  "Manual/GetStarted/CustomButton/index.html": {
    "href": "Manual/GetStarted/CustomButton/index.html",
    "title": "Custom Button | LGUI Documentation",
    "keywords": "Custom Button In this section, we will learn how to customize our button using UISprite. Before this, you should follow HelloWorld section to create a default button. The default button is a little ugly, we can use a nicer looking texture instead. 1. Prepare a sprite texture. Use photoshop or any other app to create a image, or use this image: Drag the image to UE4 content folder, name it to \"Button\": 2. Create UISpriteData. Select \"Button\" asset, right click on it and choose \"LGUISprite\"->\"Create Sprite\": Then a LGUISpriteData asset named \"Button_Sprite\" will be created: Double click on \"Button_Sprite\" and open a UISpriteDataEditor: Change \"Border Left\" and \"Border Top\" to 14, \"Border Right\" and \"Border Bottom\" to 15: Close the UISpriteDataEditor. 3. Prepare a LGUI ScreenSpaceUI. Follow the HelloWorld section to create a base ScreenSpaceUI: 4. Create UISprite and UIText. Select \"ScreenSpaceUIRoot\" actor, right click on the arrow button and choose \"Create UI Element\"->\"UISprite\", this will create a UISprite actor: Rename the created UISprite actor to \"MyButton\": Select \"MyButton\" actor, drag \"Button_Sprite\" asset to \"Sprite\" property, see the change in viewport: Select \"MyButton\" actor, right click on the arrow and choose \"Create UI Element\"->\"UIText\", this will create a UIText actor: Rename the created UIText actor to \"MyButtonText\", and change \"Depth\" to 1, \"Color\" to black, \"Text\" to \"I'm a button\", \"Size\" to 24, \"Font Style\" to \"Bold\": 5. Adjust button size. Select \"MyButton\" actor, change \"Width\" to 240, \"Height\" to 60: Select \"MyButtonText\" actor, click on the down arrow in \"Anchors\", then a AnchorSelector will popup: Hold \"Ctrl\" button on keyboard and click the right bottom button in AchorSelector, see change in viewport: 6. Add UIButton component. Select \"MyButton\" actor, click \"+Add Component\" and add a \"UIButton\" component: Select \"UIButton\" component you just created, change the \"Transition\" to \"ColorTint\": Click on the left arrow of \"Transition\", this will expand the transition area: Drag \"MyButton\" actor to \"Transition Actor\": 7. Enable RaycastTarget. Select \"MyButton\" actor, select \"UISprite(Inherited)\" component, click \"Show Advanced\" arrow button: Check \"Raycast Target\" property: 8. Add button event: Select \"MyButton\" actor, select \"UIButton\" component, find the \"On Click()\" property and click the \"+\" button: Set the event like this: 9. Play and click the button Now hit play and move your mouse over the button, then click the button, see the change in viewport: See Prev HelloWorld | See Next LGUIFont | MainPage"
  },
  "Manual/GetStarted/Font/index.html": {
    "href": "Manual/GetStarted/Font/index.html",
    "title": "Use custom font | LGUI Documentation",
    "keywords": "Use custom font In this section, we will use a custom font file(ttf, ttc, otf) to create our UIText. 1. Prepare a font file. LGUI use freetype to render fonts, so we will use freetype supported format(ttf, ttc, otf). Download a font file or grab one from system fonts directory. I use \"华文新魏\" from C:/Windows/Fonts: Copy the font file to your UE4 project directory (same directory of the .uproject file). 2. Create LGUI Font asset. Right click on the empty area of your content folder, choose \"LGUI\"->\"LGUIFont\", that will create LGUIFont asset: Rename the asset to MyLGUIFont: Double click it to open font editor window, click the \"...\" after \"FontSourceFile\" property, and choose the font file you just prepared: 3. Create UIText. Follow the HelloWorld section to create a base screen space UI. Select \"ScreenSpaceUIRoot\", and right click the down arrow, choose \"Create UI Element\"->\"UIText\": Rename the UIText you just created to \"MyUIText\": 4. Change UIText property. Select \"MyUIText\", change \"Anchor Offset Y\" to -150, so it will move down a little bit in viewport: Select \"MyUIText\", change \"Size\" to 40, \"Color\" to black, type in \"中国智造\" in the \"Text\": 5. Use our own font. The important part , select \"MyUIText\" and drag \"MyLGUIFont\" to the \"Font\" property, see the font change in viewport: See Prev HelloWorld | See Next Prefab | MainPage"
  },
  "Manual/index.html": {
    "href": "Manual/index.html",
    "title": "LGUI Manual | LGUI Documentation",
    "keywords": "LGUI Manual These pages contain information about how to use LGUI. Sections Get started and tutorial Start to use LGUI, component based workflow Sample Projects Introduce sample projects, and download these projects from github <!-- <div class=\"frontpage-section\"> <a href=\"UIElementsAndControls/index.md\"><img src=\"UIElementsAndControls/icon.png\"></a> <h3><a href=\"UIElementsAndControls/index.md\">UI elements and controls</a></h3> <p>How to use LGUI's element and controls</p> </div> --> Rendering LGUI's rendering framework Layout Use Layout to control location and size of UI InputAndInteraction Input and Interaction <!-- <div class=\"frontpage-section\"> <a href=\"LGUIPrefab/index.md\"><img src=\"missing.png\"></a> <h3><a href=\"LGUIPrefab/index.md\">LGUIPrefab</a></h3> <p>Use LGUIPrefab workflow</p> </div> <div class=\"frontpage-section\"> <a href=\"LGUIPointerEvent/index.md\"><img src=\"missing.png\"></a> <h3><a href=\"LGUIPointerEvent/index.md\">LGUIPointerEvent</a></h3> <p>LGUIPointerEvent for UI interaction</p> </div> <div class=\"frontpage-section\"> <a href=\"LGUIDrawableEvent/index.md\"><img src=\"missing.png\"></a> <h3><a href=\"LGUIDrawableEvent/index.md\">LGUIDrawableEvent</a></h3> <p>Introduce how to use LGUIDrawableEvent</p> </div> --> LTween LTween for tween animation Others ReleaseNotes ReleaseNotes contains: updates/ new features/ modify/ bug fix <!-- <div class=\"frontpage-others\"> <h3><a href=\"ThanksTo/index.md\">ThanksTo...</a></h3> <p>Thanks to those guys who helped with this plugin</p> </div> --> New docs CommonEffect Shadow, LongShadow, Outline, PositionAsUV, GradientColor TextAnimation TextAnimation can make per character animation UIBackgroundBlur Blur the background image UIBackgroundPixelate Pixlate the background image"
  },
  "Manual/Rendering/UIItem/index.html": {
    "href": "Manual/Rendering/UIItem/index.html",
    "title": "UIItem | LGUI Documentation",
    "keywords": "UIItem 1. Transform related properties Property: Functions: Anchors The anchor points for the lower left corner and the upper right corner of the rectangle. Anchor Offset X/Y X/Y position of the rectangle's pivot point relative to the anchors. The pivot point is the location around which the rectangle rotates. Not visible if anchor set to stretch or none. Width/Height Size of the rectangle. Not visible if anchor set to stretch. Stretch Left/Right/Top/Bottom Positions of the rectangle's edges relative to their anchors. This can be thought of as padding inside the rectangle defined by the anchors. Visible when anchor set to stretch. Pivot Location of the pivot point around which the rectangle rotates, defined as a fraction of the size of the rectangle itself. 0,0 corresponds to the lower left corner while 1,1 corresponds to the upper right corner. Location SceneComponent's location. X/Y is controlled by LGUI if anchor is not none. Rotation, Scale SceneComponents's rotation and scale. Hierarchy Index Mostly used for layout to sort. 2. Other properties Property: Functions: Is UI Active Active ui is visible and interactable. If parent or parent's parent... IsUIActive is false, then this ui is not visible and not interactable. Depth Higher depth render on top of lower one, and receive raycast before lower one. Color Render color of UI element. Color may be override by UISelectable(UIButton, UIToggle, UISlider ...), if UISelectable's transition set to \"Color Tint\". Inherit Alpha Alpha inherit from parent. Raycast Target Raycast Target can receive raycast, means it is ready for interaction. See Create Button . Trace Channel Trace channel for line trace of interaction. See Create Button . Raycast Complex Visible if it is a UIRenderable object. Default raycast use rectangle area for raycast, but Raycast Complex use actural mesh for raycast."
  },
  "Manual/GetStarted/index.html": {
    "href": "Manual/GetStarted/index.html",
    "title": "Get started with LGUI | LGUI Documentation",
    "keywords": "Get started with LGUI Sections Install Install from marketplace or github HelloWorld All start from \"Hello World\" CustomButton Customize our button use UISprite and UIText UIFont Create custom font Prefab Use prefab to store UI as asset, and reuse it Interaction ScreenSpaceInteraction, WorldSpaceInteraction <!-- <a href=\"CreateButton/index.md\"><img src=\"CreateButton/icon.png\"></a> --> Create button from scratch Understand trace channel and interaction"
  },
  "Manual/LTween/LGUI/index.html": {
    "href": "Manual/LTween/LGUI/index.html",
    "title": "UIItem | LGUI Documentation",
    "keywords": "UIItem No much fancy here, just find the provided functions in the LTween-LGUI category:"
  },
  "Manual/GetStarted/CreateButton/index.html": {
    "href": "Manual/GetStarted/CreateButton/index.html",
    "title": "Button from scratch | LGUI Documentation",
    "keywords": "Button from scratch This video will show us how to create our own button from scratch. Bilibili: Youtube:"
  },
  "Manual/Rendering/LGUICanvas/index.html": {
    "href": "Manual/Rendering/LGUICanvas/index.html",
    "title": "LGUICanvas | LGUI Documentation",
    "keywords": "LGUICanvas Any UI elements that need render and update must be placed under a LGUICanvas in hierarchy. Draw order of elements UI elements in canvas are drawn by order of \"Depth\" property, which is a property of each UI elements. Larger \"Depth\" render on top of lower one. And there is a \"Sort Order\" property of LGUICanvas, \"Sort Order\" always have top priority then \"Depth\". Property: Functions: Render Mode The way the UI is rendered. Options are Screen Space Overlay and World Space and Render Target(Experimental) Sort Order This can affect draw order and raycast order of UI elements. Larger Sort Order will always draw on top of lower one, and larger one always receive raycast earlier then lower one. Pixel Perfect Screen Space Overlay mode only. This can avoid half-pixel render, make UI elements render precisely on pixel. Clip Type Control UI elements pixels visibility. The options are None and Rect and Texture , None means no clip at all, Rect means rectangle area clip, Texture means use a texture's alpha channel for clip. Dynamic Pixels Per Unit The amount of pixels per unit to use for dynamically created bitmaps in the UI, such as UIText. But!!! Do not set this value too large if you already have large font size of UIText, because that will result in extreamly large font texture! Additional Shader Channels Flags to enable/disable shader channels. Default only provide Position/Color/UV0, you can check Normal/Tangent/UV1/UV2/UV3 for your own use. Default Materials Default materials, for render default UI elements. Override Parameters For not root canvas, inherit or override parent canvas parameters. Lets learn by create a UI from scratch. 1. Create a LGUICanvas LGUICanvas must stay on a actor which have a UIItem as RootComponent. Create a new empty level, drag a UIContainerActor to viewport: Rename the UIContainer to \"RootCanvas\", set the \"LGUI Transform\" parameters like this (rotation:-90,0,90): Add a LGUICanvas component to \"RootCanvas\", notice a icon and a \"0\" appear beside \"RootCanvas\" in World Outliner: Move your mouse over the icon, a tooltip will appear: Right click on the down arrow button and choose \"Create UI Element\"->\"UISprite\": A new UISpriteActor will be created, see a white rectangle appear in viewport, and number of drawcall become 1 in \"RootCanvas\". Rename the UISpriteActor to \"Sprite\": Right click on the down arrow button and choose \"Create UI Element\"->\"UIText\": Rename the UITextActor to \"Text\", \"Color\" to black, \"Depth\" to 1. See \"New Text\" appear on viewport, and drawcall count become 2: 2. Use rect clip Select \"Sprite\", change width to 1920, height to 1080, see the white rectangle exceed canvas area: Select LGUICanvas component from \"RootCanvas\" actor, change \"Clip Type\" to \"Rect\", see the Sprite being clipped with canvas's rect area: LGUICanvas support hierarchy nested RectClip Lets add a sub canvas: create a UIContainer, name it \"SubCanvas\", add a LGUICanvas component to it. Then drag \"Sprite\" and \"Text\" to \"SubCanvas\" as children, now the hierarchy should be like this: And the \"Sprite\" is clipped by \"SubCanvas\" area: Change the \"SubCanvas\" with to 640, height to 360, drag it to see the clip effect: Select LGUICanvas from \"SubCanvas\" actor, see the sub canvas parameter is much less than the parent one. Acturally only the top-most canvas can show the full parameters, sub canvas will automatically inherit parent parameters . But we do have the chance to change sub canvas parameter, by check the \"Override Parameters\" flags: If we check \"ClipType\" flag, then the \"ClipType\" parameter will appear. Then we can set \"None\" clip to disable clip: 3. Default Materials Select LGUICanvas from \"RootCanvas\", expend \"Default Materials\" and 3 material appears: LGUICanvas use these 3 materials to render all UI elements, you can replace any of it with your own implemented material, eg: change shading model to receive light, add emissive glow."
  },
  "Manual/GetStarted/Interaction/index.html": {
    "href": "Manual/GetStarted/Interaction/index.html",
    "title": "Interaction | LGUI Documentation",
    "keywords": "Interaction This video show us how to use WorldSpaceInteraction. Bilibili: Youtube:"
  },
  "Manual/LTween/index.html": {
    "href": "Manual/LTween/index.html",
    "title": "Use LTween for tween animation | LGUI Documentation",
    "keywords": "Use LTween for tween animation Sections Get started Get started with LTween for UnrealEngine's native objects LTween for LGUI LTween for LGUI Custom tween target LTween for custom Some functions Some functions that LTween provide for your work"
  },
  "Manual/Layout/index.html": {
    "href": "Manual/Layout/index.html",
    "title": "Introduce Layout | LGUI Documentation",
    "keywords": "Introduce Layout Layout controls UIHorizontalLayout Layout child elements side by side horizontally UIVerticalLayout Layout child elements side by side vertically UIGridLayout Layout child elements in grid UILayoutElement Control specific child element UISizeControlByOther UISizeControlByOther UISizeControlByAspectRatio UISizeControlByAspectRatio"
  },
  "Manual/Rendering/ScreenSpaceUI/index.html": {
    "href": "Manual/Rendering/ScreenSpaceUI/index.html",
    "title": "ScreenSpaceUI | LGUI Documentation",
    "keywords": "ScreenSpaceUI LGUI render ScreenSpaceUI directy to viewport after unreal engine render the world. 1. Create ScreenSpaceUI Select \"LGUI Tools\"->\"Basic Setup\"->\"Screen Space UI\": Then a \"ScreenSpaceUIRoot\" will be created: Select LGUICanvas component, you will see the \"Render Mode\" is \"Screen Space Overlay\": 2. LGUICanvasScaler There is another important component on \"ScreenSpaceUIRoot\", is the \"LGUICanvasScaler\": You can change parameters in this area make UI fit to different resolutions: <!-- @toto: show us more about how to fit different resolutions --> And this area can change camera parameters that render the ScreenSpaceUI:"
  },
  "Manual/Rendering/WorldSpaceUI/index.html": {
    "href": "Manual/Rendering/WorldSpaceUI/index.html",
    "title": "WorldSpaceUI | LGUI Documentation",
    "keywords": "WorldSpaceUI WorldSpaceUI use engine's default render pipeline to render UI elements, so no much fancy here. 1. Create WorldSpaceUI Select \"LGUI Tools\"->\"Basic Setup\"->\"World Space UI\": Then a \"WorldSpaceUIRoot\" will be created: 2. Use lighting and normalmap Prepare a normal map: Drag the normal map to content folder: Delete \"Frame\" and \"Info\" actor, right click the down arrow button and choose \"Create UI Element\"->\"UISprite\", and name it \"NormalMapUI\": Create a new material, name it \"NormalMapUIMat\", make it a very simple material like this: UISprite take texcoord0 as packed atlas uv , so we use texcoord1 as uv input. UISprite will use the atlas texture and set to MainTexture parameter in material . Select \"NormalMapUI\" actor, find \"Custom Material\" property, and drag the \"NormalMapUIMat\" to \"Custom Material\": The \"NormalMapUI\" looks not right in the viewport. Because by default, LGUI only set the first texcoord and no normal or tangent data, so we need to tell LGUICanvas to provide more data, by check the \"Additional Shader Channels\" flags: Now adjust light angle and position, see the bumped surface on UI: Check SampleProject on github, you will find more infomation about lighing on 3D UI:"
  },
  "Manual/LTween/Functions/index.html": {
    "href": "Manual/LTween/Functions/index.html",
    "title": "Other functions | LGUI Documentation",
    "keywords": "Other functions LTween provide some handy functions for work: VirtualCall - Register the start/update/complete events, set a duration time, so these events will execute: DelayCall - Same as engine's native node \"Delay\". c++ version may be more valuable: DelayFrameCall - Delay a specific frame count and call event: RegisterUpdateEvent | UnregisterUpdateEvent - Register the \"Update\" event so it will be executed every frame, until unregistered."
  },
  "Manual/SampleProjects/index.html": {
    "href": "Manual/SampleProjects/index.html",
    "title": "Sample Projects | LGUI Documentation",
    "keywords": "Sample Projects CarCustomization Download/Clone from github . This is a car customization project. Features: Screen Space 3D UI World Space 3D UI UI animation Tutorial Projects Download/Clone from github . This project contains several maps that shows some key features of LGUI. Features: DragDrop Layout Prefab Controller input TextAnimation Si-fi UI Download/Clone from github ."
  },
  "Manual/Layout/UIHorizontalLayout/index.html": {
    "href": "Manual/Layout/UIHorizontalLayout/index.html",
    "title": "UIHorizontalLayout | LGUI Documentation",
    "keywords": "UIHorizontalLayout"
  },
  "Manual/Rendering/index.html": {
    "href": "Manual/Rendering/index.html",
    "title": "Introduce LGUI's rendering | LGUI Documentation",
    "keywords": "Introduce LGUI's rendering LGUICanvas LGUICanvas LGUICanvas is the key to render and update LGUI's elements ScreenSpaceUI ScreenSpaceUI can render UI elements directly to viewport WorldSpaceUI WorldSpaceUI use engine's default render pipeline to render UI elements LGUI Transform UIItem and UIContainer UIItem inherit from SceneComponent, and act as a rectangle area. UIContainer is just a actor wrapper for UIItem. UIRenderable UISprite UISprite use packed atlas texture to render UI elements UITexture UITexture can directyly render texture UIText UIText can render text with font UIExtensionElements Other renderable UI elements RichTextReference Use RichText to make our text look better UIEffect CommonEffect Shadow, LongShadow, Outline, PositionAsUV, GradientColor TextAnimation TextAnimation can make per character animation UIPostProcess UIBackgroundBlur Blur the background image UIBackgroundPixelate Pixelate the background image"
  },
  "Manual/Rendering/UIBackgroundBlur/index.html": {
    "href": "Manual/Rendering/UIBackgroundBlur/index.html",
    "title": "UIBackgroundBlur | LGUI Documentation",
    "keywords": "UIBackgroundBlur Use it on ScreenSpaceUI. May have some issue when MSAA is on. This component can make blur effect on background view's image, it is just like UMG's BackgroundBlur. Create it by select \"Create UI Post Process\"->\"UIBackgroundBlur\": Property: Functions: Blur Strength Blur effect strength. Apply Alpha to Blur Will alpha affect blur strength? If true, then 0 alpha means 0 blur strength, and 1 alpha means full blur strength. So if you need animation on Blur Strength , just use \"Alpha To\" node on blueprint. Strength Texture Use strengthTexture's red channel to control blur strength, 0-no blur, 1-full blur. MaskTexture Use maskTexture's red channel to mask out blur result. Custem UIMaterial is not supported."
  },
  "Manual/ReleaseNotes/index.html": {
    "href": "Manual/ReleaseNotes/index.html",
    "title": "2.12.0 | LGUI Documentation",
    "keywords": "2.12.0 NewFeature: Editor: Cross level copy/paste actor with hierarchy. Editor: Revert prefab will not modify root ui item's anchor. Editor: If create UIItem in sublevel, then automatic make the sub level as current level. Split UIRenderable to UIBaseRenderable, UIRenderable, UIPostProcess. UIRenderable can do self render, means it can create-drawcall/ render/ sort by it self. Split out RenderProxy from PostProcess, render thread more stable. ScreenSpaceUI material now support wireframe. Modify: Remove LGUIBehaviourExecuteOrder. Fix: Reconstruct LGUIBehaviour lifecycle functions. 2.11.7 Fix: Fix bug: Click LGUI scene outliner menu cause deselect actor. Fix bug: Drag root UIItem result in wrong AnchorOffset value. Fix LTween ease animation error: InOutElastic, InOutBack, InBounce, InOutBounce. Modify: Remove LGUIEditHelper. Add more blueprint function for LGUIPlayTween. Editor detail appearance change: display thumbnail = false. Rename text animation related objects. Previours names are easily missunderstanding. These class move to namespace \"LGUIPrefabSystem\": ActorSerializer, ActorCopier, ActorReplaceTool. Make LTween blueprint functions easier: FloatTo, IntTo, VectorTo, ColorTo... Cleanup editor code. Check this doc . NewFeature: Auto refresh UI when: reimport sprite texture; change border value. Support \"Num Customized UVs\" in hud material. Add image sequence player for easily play image sequence, 2 new component: UISpriteSequencePlayer, UISpriteSheetTexturePlayer. Add copy/paste on custom editor. Now we can copy/paste anchor of LGUITransform. 2.11.6 Fix: Fix a crash caused by RangeSelector and RichTextTagSelector when check flipDirection. Fix custom tag unfunctional when the tag mark followed by empty character. Fix bug: text pixelperfect mode affect character width, result in different layout. Modify: Replace CreateLambda with CreateWeakLambda, because CreateWeakLambda is more reliable for UObject. Improve paragraph alignment editor for UIText. RichText color name use html/markdown standard color, before is ue4's color, tiny different. Add more color name in RichText, check document . 2.11.5 NewFeature: RichText support custom tag. TextAnimation selector get a new selector: RichTextTag, for easily select char by custom tag. Fix: LTween: Fix OnComplete callback for Incremental looptype. TextAnimation more stable. Modify: MSAA disabled by default(not compatible with UIBackgroundXXX in DX12). Cleanup LTween Register/UnregisterUpdateEvent. Adjust detail panels display. 2.11.4 NewFeature: Add new Incremental loop type for LTween. Add loop count limit for LTween. Add OnCycleComplete callback function for LTween, called when every loop cycle complete. Fix: Fix a potential crash when sort priority in canvas. Modify: Modify some editor appearance. Shared depth count info now split to Renderable and RaycastTarget. 2.11.3 Fix: Fix update layout issue when IsUIActive=false. Fix memory leak caused by LGUIEditorManagerObject referencing UIItem. Fix a crash: Crash when use navigation input but there is no UISelectable. Modify: Add right and middle mouse button trigger event to PresetEventSystemActor. Menu \"Create UI Extension Elements\" remove post process actors. Add lambda function for RegisterEvent of interaction components. Add more blueprint function for LGUIXXXInteraction. 2.11.2 NewFeature: Add controller input support. Custom mouse position input. Fix: Fix useNativeParameter issue when copy event in LGUIDrawableEvent. 2.11.1 Fix: Fix a shader compiler error X3504 caused by LGUIHudShader.usf. Fix buildin prefab not loaded in packaged game. Fix UITexture's UVRect issue. NewFeature: Support MultiSampleAntiAliasing!!!(MSAA) Turn on MSAA in ProjectSettins/LGUI/Renderging/AntiAliasing. UIBackgroundBlur and UIBackgroundPixelate now support on mobile. 2.11.0 NewFeature: Layout support animation when change item position. Add more blueprint functions in UIItem: GetRenderCanvas GetRootCanvas GetCanvasScaler IsScreenSpaceOverlayUI IsRenderTargetUI IsWorldSpaceUI. OnPointerEnter/Exit event more reasonable: parent enter/exit will execute only once if pointer enter/exit any child. LGUIEventFireType add new enum: OnlyTargetActor. Play/Stop mark as UFUNCTION in LGUIPlayTween. Modify: Remove OnPointerDragEnter/Exit interface because it is not needed, we can instead use isDragging and enterComponent from LGUIPointerEventData. Rename DeleteActor to DestroyActorWithHierarchy. Simplify LGUIPointerInputModule's event handle. Fix: Select canvas on SceneOutliner may change selection. UIItem depth info wrong. RichText may display \"<\" if end with symbol. Fix sort issue when use LGUI hierarchy sort. Fix bug: delay not working in some LTweenBPLibrary. Fix bug: If sprite have none packingTag, then uv get wrong. Fix bug: if LTween's duration = 0, then nothing happen. 2.10.1 Fix: Fix bug: UIEventTrigger parameter become (Actor) type. 2.10.0 Modify: Rename UISector to UIPolygon, remake it so it is much handy now. (You may need UE's \"redirect\" if you use UISector before, but some properties may need to manually setup). Remake UIRing, based on UI2DLineRenderer. Now UIRing and UI2DLine is more powerfull. (You may need UE's \"redirect\" if you use UIMesh before). Rename UIMesh to UIStaticMesh. (You may need UE's \"redirect\" if you use UIMesh before). LGUIPrefab will not crash editor, but give an error message if something wrong happen. NewFeature: Add UIPolygonLine(a line/frame version of UIPolygon). Material now support WorldPositionOffset. Fix: Click to select UI elements, now is much stable. Fix drawcall collection info display error. Lot of bugs fixed. 2.9.10 Fix: UIBackgroundPixelate flipped. Modify: UIBackgroundBlur and UIBackgroundPixelate now become stable, but not support mobile. Simplify post process shader. 2.9.9 Fix: Fix a crash caused by LGUI's scene outliner extension. Fix a crash when package android platform. NewFeature: New type of UI element: UIMesh, allow to use a UStaticMesh to render in screen space UI. Modify: Simplify post process shader. 2.9.8 Fix: Fix a crash when click RecreateThis in prefab. Fix a issue in UIScrollViewWithScrollbar, add more hints. 2.9.7 Fix: Fix a crash when destroy UIBackgroundBlur and UIBackgroundPixelate. Fix bug: UITexture not update when click snap size. Change: When select a actor and copy/paste use LGUI's method, the new actors will use selected actor as parent. --Thanks to \"四青\", he helped testing this plugin. NewFeature: Support material masked blend mode for screen space UI's custom material. 2.9.6 Fix: Fix ScrollViewWithScrollbar issue. Fix Start call issue in LGUIBehaviour. NewFeature: Add a blueprint function for runtime create LGUISpriteData. 2.9.5 Fix: Fix a crash caused by Raycaster. Fix problems with undo system. --Thanks to \"Wifi\"(it's acturally a name), he helped testing this plugin. 2.9.4 Fix: Duplicated screen space UI on viewport, when PIE with multiplayer(player count more than 1). 2.9.3 Fix: Avoid GWorld for LTweenActor creation, so LTween related code should provide a object to get world. 2.9.2 NewFeature: Android platform ready! 2.9.1 NewFeature: LGUIDrawableEvent now have preset parameter struct, like LGUIDrawableEvent_Float/ LGUIDrawableEvent_Int32... Fix; Fix UIPlayTween's loop issue. Fix LGUIDrawableEvent's editor issue when use Vector2/Vector3/Vector4/Color/LinearColor/Rotator as parameter. 2.9 NewFeature: TextAnimation, WOW!!! You can use UIEffectTextAnimation to customize it. LGUIDrawableEvent now support multiple component of same type on actor, use component name to identify. LGUIDrawableEvent now get a very clean and clear editor interface. LGUIPlayTween, for quick setup tween animation. LGUIComponentReference now get a specific blueprint node, that you can get component directly. Fix: Fix LGUICanvasScaler scale and size issue. Fix Layout update issue, when there is hierarchy nested LGUICanvas exist. 2.8.6 Fix: Fix ScreenSpaceUI preview in editor viewport. Other fix: crash caused by LGUICanvas, pixel perfect render of UIText. 2.8.5 Fix: Fix a crash when delete LGUICanvas. Fix pixel perfect calculation issue caused by 2.8.2 version. Fix: add or remove canvas not update correctly. Change: Change LGUICanvas's update methold. Basicall the old methold will update hierarchy multiple times in one frame, new method will update in multiple frames, this is more stable. 2.8.4 Fix: Fix alpha not update correctly issue, caused by 2.8.3 version. Fix a crash when unload current level after use \"Copy Component Values\". Fix drawcall count error. Fix a crash when deserialize actor from prefab. Fix hierarchyIndex sort error. NewFeature: Add SCOPE_CYCLE_COUNTER to LGUIBehaviour's update function. 2.8.3 Improve: Increase performance. NewFeature: Now we can preview screen space UI in edit mode, just choose a viewport(which you can find in \"Window/Viewports/\") and click the button \"LGUI Tools/Active Viewport as LGUI Preview\". Fix: Duplicate actor or generate a prefab in edit mode will also create a LGUIManagerActor, this is incorrect, fixed. Click and select UI element in viewport more stable now. 2.8.2 NewFeature: LGUICanvas support render to custom RenderTarget2D.(Experimental) Improve: Performance improve. Fix: UISprite's fill type in pixel perfect mode. 2.8.1 Change: Remove UIPanel. NewFeature: Add Canvas and drawcall count tip info in scene outliner. Fix: Fix basic setup not interactable issue. Fix UIText disappear when second time input from UITextInputComponent in some special case. 2.8 Change: LGUIEventSystem's RegisterGlobalListener now use FLGUIBaseEventDelegate/FLGUIBaseEventDynamicDelegate. After your delegate is called, you can cast ULGUIBaseEventData to ULGUIPointerEventData if you need. LGUI_Saved_Data.json file now save to project intermediate folder. Move LGUISettings to DefaultEngine.ini. LGUIPointerXXXInterface.h file move to Event/Interface/ folder. NewFeature: EventSystem now user InputModule to handle input events, this should be more extensible for us to make different input for different platform, such as mobile. Add dragToHold parameter to LGUIXXXRayemitter. LGUIXXXInputMobule and LGUIXXXRaycaster now can use ActorComponent's Activate/Deactivate. Fix: Fix a crash caused by UIText's OverflowType=ClampContent. Fix UITexture's UVRect issue. Fix LGUIBehaviour execute order error. 2.7.2 Change: Change FLGUIPointerEventData to ULGUIPointerEventData. Deprecate LGUIPointerEventData's currentComponent, use enterComponent instead. Improve: Auto UIItem's hierarchyIndex management. 2.7.1 New feature: UISprite add fill type: Horizontal/ Vertical/ Radial90/ Radial180/ Radial360, all these type can flip fill direction and support several origin type. Editor can preview canvas resolution scale of LGUICanvasScaler. UISizeControlByAspectRatio now support FitInParent/ EnvelopeParent. Improve: Improve UISelectableTransitionComponent. Improve layout editor. Fix: Fix virtual cameram draw issue of LGUICanvasScaler. Fix a build warning of bind none const function. 2.7 Modify: Change UIComponentBase to LGUIBehaviour. If you already use UIComponentBase, follow these steps: a.Find config file in your (UE4Project)/Config/DefaultEngine.ini b.Find or add line [/Script/Engine.Engine] c.Add these lines under [/Script/Engine.Engine]: +ActiveClassRedirects=(OldClassName=\"/Script/LGUI.UIComponentBase\",NewClassName=\"/Script/LGUI. LGUIBehaviour\") UIBackgroundBlur now use maskTexture to acturally mask out blur area. add strengthTexture to control blur strength. New feature: LGUIBehaviour is a totally remaked class, all I want is trying to make it more like Unity's MonoBehaviour. Because I think Unity's interfaces are more normative. LGUIBehaviour can control event execute order by changing LGUIBehaviourExecuteOrder in LGUISettings. Fix: UISlider's handle's position issue when DirectionType=RightToLeft/TopToBottom. 2.6.3 New feature: Now we can pass UMaterialInstanceDynamic to LGUIRenderable's custom material. 2.6.2 Improve: Improve italic style text render. New feature: Now we can click to select UI direct inside level editor. 2.6.1 Improve: Improve visual effect and performance of UIBackgroundBlur. 2.6 New feature: Add UIPostProcess UI element type, now we can extend our own post process on UI. Add UIBackgroundBlur effect, which is based on UIPostProcess. Fix: Fix a compile error in some specific condition(inline function xxx not defined) Improve pixel perfect and dynamic pixel scale of UIText render Fix a bug: If a UProperty is SceneComponent and AttachParent property have value, then endless loop will occur. Modify: Recreate UIFlyoutMenu and UIComboBox. Change LGUIPointerEventData's property \"hitComponent\" to \"currentComponent\". 2.5 New feature: Add rich text support in UIText. Check \"Rich Text\" property to see more. LGUICanvasScaler now provides more options for users to control UI'adaptive behaviour. Fix: Fix a crash on LGUIPrefab when hit revert button. Fix a crash when change level, caused by UIItem. Fix a UIText texture display error. 2.4.1 Modify: Delete actor will also check delete prefab. Add engine version to prefab, so prefab made by different engine version will show a warning. Fix: Fix a crash when use UIText in blueprint actor editor, although work in blueprint actor is not recommaded for LGUI. 2.4 Fix: Fix a crash when compile blueprint that inherit from UIItem. Fix a compile warning in UIItem. New feature: Add UISpriteBase_BP and UITextureBase_BP for blueprint extend custom UI element. LTween add blueprint tween for some basic types, eg. FloatTo/IntTo/Vector2To/Vector3To... 2.3.4 Modify: Increase performance. New feature: Add UIRenderable_BP for blueprint can extend custom UI element. 2.3.3 Fix: Fix a fatal error after shutdown, caused by LGUIFontData. Fix a pontential link error caused by UI2DLineRendererBase. 2.3.2 Fix: Recreate default plugin's prefab assets. Fix a bug for LGUIDrawableEvent when recompile blueprint. Add more check to LGUIDrawableEvent to prevent crash. New feature: Add lambda function to LTween's RegisterUpdateEvent, it's just a quick entry and not for blueprint. 2.3.1 Fix: Fix crash when redo from Prefab instance. New feature: Add \"Browser to Prefab asset\" to prefab edit. 2.3: Fix: Fix crash when add LGUICanvas in blueprint actor. But blueprint actor for LGUI is still not recommended. Modify: Rename LTween's XXXGetterFunction to LTweenXXXGetterFunction, and same change to XXXSettterFunction. New feature: LGUIFont now can pack font texture into UISprite's atlas texture! This can be very helpful to reduce drawcall. All we need to do is to change LGUIFont's packingTag property to a UISprite's packingTag. Create folder for LGUIPrefab actor in SceneOutliner. 2.2： Fix: Fix a bug of UITextInputComponent multi line edit. Screen space UI render issue. New feature: Navigation support, eg: use tab key to navigate to next UISelectableComponent. Call NavigationXXX function in LGUIEventSystem. UITextInputComponent support ignore keys, canbe useful for navigation. LGUIComponentReference now support multiple component of same type on same actor, all we need to do is just click and select a component. 2.1: Fix: Screen space UI sort order problem. UITextInputComponent more stable. Update: Change default rotate from (-90, 0, 90) to (-90, 0, 0). Replace LGUIEventSystemActor with LGUIEventSystem component. Modify for 2DLineRendererBase, remove CurrentPointArray property, add UseGrowValue to determin whether or not use grow value. New feature: Add uiScale property to LGUICanvas, maybe useful in future. 2.0: Screen space UI (Or HUD) not get a huge performance update. The 1.x version use SceneCapture2D, which is vary bad on performance. But now the new 2.x version of LGUI's HUD, is render direct on screen, no additional performance cost! Remove UIPanel, use LGUICanvas to render all UI elements. Remove UIRoot, LGUICanvas and LGUICanvasScaler will do the job. 1.14: Fix: button \"Create Prefab\" not create content. some crash fixed. Update: change UIItem's base class UPrimitiveComponent to USceneComponent, this can save a lot of disk space and memory. But!!!!! You Need To Recreate Your Prefab Which Contains LGUI Elemnt. add RenderTargetSizeMultiply for UIRoot, increase this value can perform a supersampleing thing. New feature: (still under develop)Add a button to UIRoot component named \"Open Screen Space UI Viewer\", which can open a window to preview Screen Space UI. Save scene outliner's hierarchy state now support save and open map. 1.13: Fix: material's IsFontTexture property not set correctly. New feature: save scene outliner's hierarchy state(actor's folder) before play, and restore it after end play. 1.12: Fix: screen space UI alpha blend problem. Upgrade: prefab: when select a actor, drag to create prefab will attach to that actor. editor: ReplaceUIElement now can keep and replace object reference. Modify: Avoid using GWorld, so LoadPrefab must provide a object to get world. New feature: A new column on SceneOutliner, provide ability to create/modify UI direct in SceneOutliner. 1.11: Fix some bugs. Fix bug: crash caused by UITextInputComponent, when select text content. Fix LTween's InOutBack ease type error. Add preset interaction components, LGUIScreenSpaceInteraction/LGUIWorldSpaceInteraction, for quick setup. Add \"Screen Space UI\" and \"World Space UI\" preset setup at editor \"LGUI Tools/Basic Setup\". Add \"Replace UI Elements\" at editor \"LGUI Tools/Replace UI Elements\". 1.10: Fix some bugs. Modify layout and editor. 1.9: Fix a crash caused by ActorSerializer. Add UENUM support for LGUIDrawableEvent. UI2DLine add \"grow\" feature, can grow line from start to end. Change LGUIEditor's rule of duplicate object's name. 1.8: Fix LTween crash issue. ActorSerializer(PrefabSystem) and ActorCopier now support instanced object property. LGUIComponentReference add blueprint support. 1.7: Fix some bugs. Improve performance of UITexture's tiled mode and UISprite's tiled mode. 1.6: Fix a bug that cause an error and stop cook process. Add more alignment options for layout control. 1.5: Expose more interface to blueprint(most is layout component). Add UVRect property to UITexture, so UITexture can choose a rect area to show texture. If any prefab contains the UITexture component, then you should recreate that prefab. Modify UIRoot for editor simulation mode. When you use overlay UI by SceneCapture2D, you can eject player and hide UI. Show drawcall count on UIPanel's details panel. Fix edit mode update issue. Fix a crash caused by UISprite tiled mode. 1.4: Fix some bugs Replace editor update with FTickableObject. 1.3: Change some editor icon. Add new editor enter on toolbar, with LGUI icon button. Add new editor helper function \"Change Trace Channel\", this can quickly change UI element's trace channel with hierarchy. Add new function \"SetTraceChannel\" and \"GetTraceChannel\" to UIItem. 1.2: Thanks to jeff@lockerman.org , I modified some class names from 2DLineXXX to UI2DLineXXX, because digits as first char of class name is not good. If you already use some of these classes, follow these steps: a.Find config file in your (UE4Project)/Config/DefaultEngine.ini b.Find or add line [/Script/Engine.Engine] c.Add these lines under [/Script/Engine.Engine]: +ActiveClassRedirects=(OldClassName=\"/Script/LGUI.2DLineChildrenAsPoints\",NewClassName=\"/Script/LGUI.UI2DLineChildrenAsPoints\") +ActiveClassRedirects=(OldClassName=\"/Script/LGUI.2DLineChildrenAsPointsActor\",NewClassName=\"/Script/LGUI.UI2DLineChildrenAsPointsActor\") +ActiveClassRedirects=(OldClassName=\"/Script/LGUI.2DLineRaw\",NewClassName=\"/Script/LGUI.UI2DLineRaw\") +ActiveClassRedirects=(OldClassName=\"/Script/LGUI.2DLineActor\",NewClassName=\"/Script/LGUI.UI2DLineActor\") +ActiveClassRedirects=(OldClassName=\"/Script/LGUI.2DLineRendererBase\",NewClassName=\"/Script/LGUI.UI2DLineRendererBase\") +ActiveClassRedirects=(OldClassName=\"/Script/LGUI.2DLineRing\",NewClassName=\"/Script/LGUI.UI2DLineRing\") +ActiveClassRedirects=(OldClassName=\"/Script/LGUI.2DLineRingActor\",NewClassName=\"/Script/LGUI.UI2DLineRingActor\") +ActiveClassRedirects=(OldClassName=\"/Script/LGUI.2DLineRingFrame\",NewClassName=\"/Script/LGUI.UI2DLineRingFrame\") +ActiveClassRedirects=(OldClassName=\"/Script/LGUI.2DLineRingFrameActor\",NewClassName=\"/Script/LGUI.UI2DLineRingFrameActor\") After these steps, the engine should should recognize these new classes. 1.0: First submit"
  },
  "Manual/LTween/Custom/index.html": {
    "href": "Manual/LTween/Custom/index.html",
    "title": "Create tween for your own | LGUI Documentation",
    "keywords": "Create tween for your own LTween provide common tween functions: \"Float To\", \"Int To\", \"Vector2 To\", \"Vector3 To\", \"Vector4 To\", \"Color To\", \"LinearColor To\", \"Quaternion To\", \"Rotator To\". With these functions, you can even make tween animation with UMG. Let's learn by using \"Rotator To\", use it to rotate a cube. 1. Setup level Create a new default level, drag a cube to viewport, set mobility to movable, set location to (0, 0, 80): Create a ActorComponent blueprint, name it \"TweenAnimation\": Attach \"TweenAnimation\" component to cube: Drag out from \"Event Begin Play\" and add \"Rotator To\" node: 2. Setup \"Setter\" parameters \"Setter\" is LTween's delegate, LTween will calculate interpolated value from \"Start Value\" and \"End Value\", and use \"Setter\" to pass the interpolated value. Drag out \"Setter\" and choose \"Add Event\"->\"Add Custom Event\", then a event with value of rotator type will be created: Setup the \"CustomEvent_0\" like this: 3. Setup other parameter Drag out \"Root Component\" and select \"Get Relative Rotation\", and connect to start value: Set \"End Value\" to (0, 0, 90), \"Duration\" to 3.0, set delay to 1.0: Now the setup is complete, hit play to see the animation."
  },
  "Manual/Rendering/UIBackgroundPixelate/index.html": {
    "href": "Manual/Rendering/UIBackgroundPixelate/index.html",
    "title": "UIBackgroundPixelate | LGUI Documentation",
    "keywords": "UIBackgroundPixelate Use it on ScreenSpaceUI. May have some issue when MSAA is on. This component can make pixelate effect the background view's image. Create it by select \"Create UI Post Process\"->\"UIBackgroundPixelate\": Property: Functions: Pixelate Strength Pixelate effect strength. Apply Alpha to Strength Will alpha affect blur strength? If true, then 0 alpha means 0 blur strength, and 1 alpha means full blur strength. So if you need animation on Pixelate Strength , just use \"Alpha To\" node on blueprint. Custem UIMaterial is not supported."
  },
  "Manual/Rendering/RichTextReference/index.html": {
    "href": "Manual/Rendering/RichTextReference/index.html",
    "title": "RichText | LGUI Documentation",
    "keywords": "RichText Check \"Rich Text\" property in UIText to make it work: Suported tags Tag Description Example b Renders the text in boldface. This is a <b>LGUI</b> example. i Renders the text in italics. This is a <i>LGUI</i> example. u Renders the text with underline. This is a <u>LGUI</u> example. s Renders the text with strikethrough. This is a <s>LGUI</s> example. size Sets the size of the text according to the parameter value. This is a <size=18>LGUI</size> example. This is a <size=+4>LGUI</size> example. This is a <size=-4>LGUI</size> example. color Sets the color of the text according to the parameter value. The color can be specified in the traditional HTML format. #rrggbbaa ...where the letters correspond to pairs of hexadecimal digits denoting the red, green, blue and alpha (transparency) values for the color. For example, cyan at full opacity would be specified by color=#00ffffff... Another option is to use the name of the color, This is easier to understand but naturally, the range of colors is limited and full opacity is always assumed. The sheet blow shows supported color name. This is a <color=#ff000000>LGUI</color> example. This is a <color=red>LGUI</color> example. sup Renders the text with superscript. This is a <sup>LGUI</sup> example. sub Renders the text with subscript. This is a <sub>LGUI</sub> example. CustomTag This is useful when you need to select a range of text. This is a <MyTag>LGUI</MyTag> example. Suported color names Collor name Hex value Swatch black #000000ff white #ffffffff gray #808080ff silver #c0c0c0ff red #ff0000ff green #008000ff blue #0000ffff orange #ffa500ff purple #800080ff yellow #ffff00ff"
  },
  "Manual/Rendering/UIText/index.html": {
    "href": "Manual/Rendering/UIText/index.html",
    "title": "UIText | LGUI Documentation",
    "keywords": "UIText UIText can render UE4's text/string with LGUIFont. Properties Property: Functions: Font The Font used to display the text. Text The text displayed by the control. Size The size of the displayed text. Space The horizontal and vertical separation between characters. H Align The horizontal alignment of the text. V Align The vertical alignment of the text. Overflow Type The method used to handle the situation where the text is too wide or too tall to fit in rectangle. The options are Horizontal Overflow and Vertical Overflow and Clamp Content . Adjust Width Valid when Overflow Type is Horizontal Overflow . Set the rectangle's width to real with of text content. Adjust Height Valid when \"Overflow Type* is Vertical Overflow . Set the rectangle's height to real height of text content. Font Style The style applied to the text. The options are None , Bold , Italic , Bold and Italic . Rich Text Should markup elements in the text be interpreted as Rich Text styling? See Rich Text Reference . Other Properties See UIItem ."
  },
  "Manual/LTween/GetStarted/index.html": {
    "href": "Manual/LTween/GetStarted/index.html",
    "title": "Use LTween for SceneComponent | LGUI Documentation",
    "keywords": "Use LTween for SceneComponent 1. Move/Rotate/Scale Animation Create a new default level, drag a cube to viewport, set mobility to movable, set location to (0, 0, 80): Create a ActorComponent blueprint, name it \"TweenAnimation\": Edit the TweenAnimation blueprint like this, this will move the cube's relative location.x to the \"EndValue\": Drag the TweenAnimation blueprint to the cube and hit play, the cube will move to (500, 0, 80) in 0.5 seconds: The animation looks very simple, lets make it a little interesting. Double click to Open TweenAnimation blueprint, change \"Duration\" to 3.0. Add a \"Local Rotator To\" node like this: Hit play, the cube will move and rotate in viewport: Add a \"Local Scale To\" node like this, then hit play and see the animation: You can find other tween functions in \"LTween\" category: 2. Delay and Ease Delete \"Local Position X To\" and \"Local Scale To\" node, keep \"Local Rotator To\" node, and set \"Delay\" to 1.0, hit play (the animation will start after 1 seconds when play): LTween provides severial ease types, click \"Ease\" and select the type you want. This site could be a good reference about ease functions (image is also from site https://www.inkfood.com/tween-3d-objects/ ): CurveFloat There is a special ease type called \"CurveFloat\": This can let us use a CurveFloat to control our animation. The following steps will show you how to do it: Right click on empty area of Content, choose \"Miscellaneous\"->\"Curve\": Select \"CurveFloat\" in the popup window: Name it to \"AnimationCurve\": LTween will use horizontal range from 0 to 1, keep that in mind and make the curve to any type you want: Open \"TweenAnimation\" blueprint, drag out \"Return Value\" of \"Local Rotator To\" node, and add a new node \"Set Curve Float\", and choose \"AnimationCurve\" in \"New Curve Float\", this will make the CurveFloat work: 3. Loop Loop is one of the most important thing of a tween animation. After the \"Set Curve Float\" node, Drag out \"Return Value\" and add a new node \"Set Loop\": Click \"New Loop Type\" and you will find 4 options: Once - No loop Restart - Each loop cycle restarts from beginning Yoyo - The tween move forward and backward at alternate cycles Incremental - Continuously increments the tween at the end of each loop cycle (A to B, B to B+(A-B), and so on) Don't forget to set \"New Loop Count\", 0 or 1 means no loop, -1 means infinite loop, change these parameters and hit play. 4. Callback Callback function is also a can't-missing feature in tween animation. LTween provide these callbacks: OnStart - Execute when animation start (if have delay, then execute after delay) OnUpdate - Execute every frame if is tweening OnComplete - Execute when animation complete OnCycleComplete - Exeucte every cycle complete when use loop Setup callback function is easy. eg OnComplete, drag out the \"Return Value\" and add new node \"On Update\", drag out \"New Update\" and add a custom event, the event will execute as you want: Functions Pause/Resume - Pause/Resume this animation Kill/KillIfIsTweening - Kill the tween if the animation already start ForceComplete - Force complete this animation at this frame, call OnComplete Use LTween for Material LTween provide \"Material Vector Parameter To\" and \"Material Scalar Parameter To\" nodes for \"Material Instance Dynamic\" objects:"
  },
  "Manual/Rendering/CommonEffect/index.html": {
    "href": "Manual/Rendering/CommonEffect/index.html",
    "title": "UIEffect | LGUI Documentation",
    "keywords": "UIEffect Select UIRenderable actor(UIText, UISprite, UITexture), add one of these components: UIEffect Shadow , UIEffect Long Shadow , UIEffect Outline , UIEffect Position As UV , UIEffect Gradient Color : Execute Order Every UIEffect component have Execute Order property, this defines the effect execute order when there is multiple UIEffect component in same actor. Lower Execute Order will affect earlier than higher one. 1. Shadow The Shadow component adds a simple outline effect to UIRenderable components such as UIText/UISprite/UITexture. It must be on a actor which have a UIRenderable component. Property: Functions: Shadow Color The color of the shadow. Multiply Source Alpha Multiplies the alpha of the UIRenderable onto the alpha of the effect. Shadow Offset The offset of the shadow expressed as a vector. 2. Long Shadow The Long Shadow component is like Shadow, but give us more control parameters, we can make very smooth shadow, or make it look thickness. Property: Functions: Shadow Color The begin color of the shadow. Shadow Size The offset of the shadow expressed as a vector. Shadow Segment More segment will render more smooth shadow, but need more cost. Use Gradient Color Use Gradient Color to affect the shadow. Gradient Color Consider this is the end color of the shadow. Multiply Source Alpha Multiplies the alpha of the UIRenderable onto the alpha of the effect. 3. Outline The Outline component adds a simple outline effect to UIRenderable components such as UIText/UISprite/UITexture. It must be on a actor which have a UIRenderable component. Property: Functions: Outline Color The color of the outline. Outline Size The distance of the outline effect horizontally and vertically. Multiply Source Alpha Multiplies the alpha of the UIRenderable onto the alpha of the effect. 4. Position As UV This will modify selected uv channel, and use position.xy as uv data. 5. Gradient Color The Gradient Color component can change UIRenderable's color to 2 or four different colors. Property: Functions: Direction Type Gradient direction type, the options are Bottom to Top and *Top to Bottom\" and \"Left to Right\" and \"Right to Left\" and \"Four Cornor\". Multiply Source Alpha Multiplies the alpha of the UIRenderable onto the alpha of the effect. Color 1/2/3/4 If Direction Type is set to Four Cornot\" then four color will be used as four cornor color, otherwise only *Color 1 and Color 2 is used for two color."
  },
  "Manual/Rendering/TextAnimation/index.html": {
    "href": "Manual/Rendering/TextAnimation/index.html",
    "title": "TextAnimation | LGUI Documentation",
    "keywords": "TextAnimation Select a UIText actor, add \"UIEffectTextAnimation\" component: 1. TextAnimation Component Property: Functions: Selector Selector defines the method to select characters in text. Properties Properties defines which property will affect and how it affect. Execute Order See Common Effect Basically we use Selector to select range of characters in text, and use Properties to change character's property, then use a animation controller to Play Animation . Get example from This Project . 2. Selector Selector can collect information about which characters are selected, and 0 to 1 interpolation value from start to end, then provide these informations to Properties . There are 3 types of Selector: Range, Random, RichTextTag. Range selector defines start and end range of characters in UIText, and provide 0 to 1 value(for interpolation) from start to end. Property: Functions: Start Start character position from 0 to 1, 0 is first character of text, 1 is last one. End End character position from 0 to 1, 0 is first character of text, 1 is last one. Offset 0 means Properties will have no effect, 1 means Properties have full effect, and middle value is interplation. We can set this \"offset\" property to make animation. Range Selector can provide 0 to 1 value from start to end, but sometime Properties effect may look too smooth, so lower this value can let Properties effect more sharp. Flip Direction Selector can provide 0 to 1 value from start to end when this value is false, if it is true then 1 to 0 from start to end. Random selector will select characters randomly, and generate random value from 0 to 1 for interpolation. Property: Functions: Seed Random seed. Start Start character position from 0 to 1, 0 is first character of text, 1 is last one. End End character position from 0 to 1, 0 is first character of text, 1 is last one. Offset 0 means Properties will have no effect, 1 means Properties have full effect, and middle value is interplation. We can set this \"offset\" property to make animation. RichTextTag selector can select characters by rich-text custom-tag, and provide 0 to 1 value(for interpolation) from start to end. Property: Functions: Range Like the property in Range selector. Lower this value can let Properties effect more sharp. Tag Name Custom tag name Flip Direction Like the property in Range selector, flip 0-1 to 1-0. Offset 0 means Properties will have no effect, 1 means Properties have full effect, and middle value is interplation. We can set this \"offset\" property to make animation. 3. Properties Properties can use the information that passed from Selector , and apply property change to characters. There are many types of Properties: Alpha, Color, Position, Rotation, Scale, Position Random, Position Wave... The name is what it functional for. eg. Alpha can change transparency of characters. Property: Functions: Alpha Target alpha value, 0-1 range. Ease Type Animation type, same as LTween ease. Ease Curve Only valid if easeType = CurveFloat. Use CurveFloat to control the animation. ColorRandom can generate random color. Property: Functions: Seed Random seed Min Random min Max Random max Use HSV Conver color to HSV(Hue, Saturate, Value) and interpolate, then convert the result back. Interpolate two colors in HSV may look better. PositionWave can use a sin function to generate wave effect for characters. Property: Functions: Position Max position value for sin wave. Sin function generate values from -1 to 1, so the result will be from -position to position. Frequency Higher frequency will generate smaller wavelength. Speed Move speed of the wave. Flip Direction Flip move speed direction of the wave. We can use multiple properties to combine our specific effects, the effects will calculate from top to bottom: 4. PlayAnimation We can use build-in LGUIPlayTween component to control our animation. The key is call function SetSelectorOffset on UIEffectTextAnimation component."
  }
}