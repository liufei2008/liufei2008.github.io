import{_ as e,a as t,b as a,c as n,d as r,e as s,f as i,g as o,h as l,i as p,j as c,k as h,l as g,m,n as d,o as u,p as _,q as f,r as w,s as T,t as b,u as v}from"./step18-BNke6aOJ.js";import{_ as C,c as L,o as k,a as x}from"./app-_l_BygEn.js";const y={},S=x('<h1 id="ltween" tabindex="-1"><a class="header-anchor" href="#ltween"><span>LTween</span></a></h1><p><strong>注意！！！</strong> LTween是LGUI插件中的一个模块，如果你已经有了LGUI插件那么就不需要再购买LTween！</p><p>LTween (Lex-Tween) 是个用于虚幻引擎中的简单、快速、高效的补间动画工具。</p><p>视频教程： <a href="https://youtu.be/m0-aYP8zRSw?si=Nlnroc-a3TEiZiqT" target="_blank" rel="noopener noreferrer">Youtube</a> <a href="https://www.bilibili.com/video/BV1Ey4y1Q7tM/?share_source=copy_web&amp;vd_source=b22254760c9a0522c8caea62e5327c1d" target="_blank" rel="noopener noreferrer">Bilibili</a></p><hr><h1 id="对scenecomponent使用ltween" tabindex="-1"><a class="header-anchor" href="#对scenecomponent使用ltween"><span>对SceneComponent使用LTween</span></a></h1><h2 id="移动-旋转-缩放-动画" tabindex="-1"><a class="header-anchor" href="#移动-旋转-缩放-动画"><span>移动/旋转/缩放 动画</span></a></h2><p>创建个新的默认场景，创建个Cube，设置为可移动，设置位置到（0, 0, 80）： <img src="'+e+'" alt=""></p><p>创建个ActorComponent蓝图，命名为“TweenAnimation”： <img src="'+t+'" alt=""></p><p>编辑TweenAnimation蓝图，按照下图添加“Local Position X To”节点，这样将会把Cube的局部位置的x轴移动到“EndValue”： <img src="'+a+'" alt=""></p><p>拖拽TweenAnimation蓝图到Cube然后运行，可以看到Cube在0.5秒钟移动到位置（500, 0, 80）： <img src="'+n+'" alt=""></p><p>这个动画非常简单，我们可以弄得更有趣点。双击TweenAnimation打开蓝图编辑器，修改“Duration”为3.0，像下图这样添加个“Local Rotator To”节点： <img src="'+r+'" alt=""></p><p>运行可以看到Cube会移动和旋转： <img src="'+s+'" alt=""></p><p>像下图一样添加个“Local Scale To”节点，运行看看动画： <img src="'+i+'" alt=""></p><p>你也可以找到其他的动画节点，都在“LTween”分类里： <img src="'+o+'" alt=""></p><h2 id="延迟和缓动" tabindex="-1"><a class="header-anchor" href="#延迟和缓动"><span>延迟和缓动</span></a></h2><p>删除“Local Position X To”和“Local Scale To”节点，保留“Local Rotator To”节点，设置“Delay”为1.0，运行（动画将会在点击运行之后1秒钟开始）： <img src="'+l+'" alt=""></p><p>LTween提供了多个缓动类型，点击“Ease”然后选择你需要的缓动类型。<a href="https://www.inkfood.com/tween-3d-objects/" target="_blank" rel="noopener noreferrer">这个帖子</a>可以看到关于缓动函数曲线的信息（图片也是从这个站点获取的）： <img src="https://www.inkfood.com/wordprez/wp-content/uploads/easingFunctions.png" alt=""></p><h3 id="curvefloat" tabindex="-1"><a class="header-anchor" href="#curvefloat"><span>CurveFloat</span></a></h3><p>有个特殊的缓动类型叫做“CurveFloat”： <img src="'+p+'" alt=""></p><p>“CurveFloat”可以让我们用个曲线来控制我们的动画。<br> 后面的步骤将会告诉你如何使用“CurveFloat”。<br> 右键单击Content的空白处，选择“Miscellaneous”-&gt;“Curve”： <img src="'+c+'" alt=""></p><p>在弹出窗口里选择“CurveFloat”： <img src="'+h+'" alt=""></p><p>命名为“AnimationCurve”： <img src="'+g+'" alt=""></p><p>LTween用曲线的水平方向的0-1范围作为时间，记住这一点然后你可以制作出你想要的任何的曲线用于动画： <img src="'+m+'" alt=""></p><p>打开“TweenAnimation”蓝图，从“Local Rotator To”节点的“Return Value”拖拽出线，添加个“Set Curve Float”节点，然后在“New Curve Float”选择“AnimationCurve”： <img src="'+d+'" alt=""></p><h2 id="循环" tabindex="-1"><a class="header-anchor" href="#循环"><span>循环</span></a></h2><p>循环是补间动画中最重要的功能点之一。 从“Set Curve Float”节点的“Return Value”拖出线然后添加节点“Set Loop”： <img src="'+u+'" alt=""></p><p>点击“New Loop Type”出现4个选项：</p><ul><li><strong>Once</strong>： 不循环</li><li><strong>Restart</strong>： 每次循环都重新开始</li><li><strong>Yoyo</strong>： 动画正向和反向交替</li><li><strong>Incremental</strong>： 每次动画结束都以上一次的结束值为开始值来增长（A到B，B到B+(A-B)...） <img src="'+_+'" alt=""></li></ul><p>别忘了要设置“New Loop Count”，0或1代表没有循环，-1代表无限循环。</p><h2 id="游戏暂停-和-时间缩放" tabindex="-1"><a class="header-anchor" href="#游戏暂停-和-时间缩放"><span>游戏暂停 和 时间缩放</span></a></h2><p>一般情况下当游戏暂停的时候，补间动画也会暂停；当设置时间缩放之后，补间动画也会收到影响。但有时我们不想让补间动画受到影响，我们想让动画继续正常播放，无论是设置游戏暂停或时间缩放。那么以下两个属性就比较适合这种情况：</p><ul><li><strong>SetAffectByGamePause</strong>: 这个补间动画是否会受到游戏暂停影响？默认为是。</li><li><strong>SetAffectByTimeDilation</strong>: 这个补间动画是否会受到时间缩放影响？默认为是。</li></ul><h3 id="注意" tabindex="-1"><a class="header-anchor" href="#注意"><span>注意!!!</span></a></h3><p>对于LGUI的屏幕空间UI，如果补间动画用的是UI自带的函数（比如UIItem.WidthTo），那么这个补间动画会自动调用 SetAffectByGamePause(false) 和 SetAffectByTimeDilation(false) ，这样之后UI就不会受到这两者影响（就像UMG）。我们也可以修改这个设置：<br><img src="'+f+'" alt=""><br> S对于UMG的补间动画也一样.</p><h2 id="更新类型" tabindex="-1"><a class="header-anchor" href="#更新类型"><span>更新类型</span></a></h2><p>当创建个新的补间动画，动画将会在TickingGroup::DuringPhysics的阶段执行，这也是Actor和ActorComponent的默认TickingGroup。<br> 我们也可以修改补间动画的TickingGroup，通过调用函数<strong>SetTickType</strong>：<br><img src="'+w+'" alt=""> 这个函数的参数 <strong>PrePhysics DuringPhysics PostPhysics PostUpdateWork</strong> 就和UE自带的TickingGroup一样。</p><p>最后一个参数 <strong>Manual</strong> 比较特别，它可以让我们使用自定义的tick。我们可以这样调用 <strong>ManualTick</strong> 函数： <img src="'+T+'" alt=""></p><h2 id="事件" tabindex="-1"><a class="header-anchor" href="#事件"><span>事件</span></a></h2><p>事件也是补间动画系统中一个非常重要的功能。 LTween提供这些事件：</p><ul><li><strong>OnStart</strong>： 当动画开始的时候执行，如果动画有延迟，那么当延迟结束之后才会执行</li><li><strong>OnUpdate</strong>： 动画过程中每一帧都执行</li><li><strong>OnComplete</strong>： 当动画结束的时候执行，如果动画有循环，那么在所有循环结束之后执行。如果是无限循环那么就不会执行。</li><li><strong>OnCycleStart</strong>： 每次循环开始的时候执行</li><li><strong>OnCycleComplete</strong>： 每次循环结束的时候执行 设置事件很简单，比如OnUpdate，可以从“Return Value”拖出线然后添加“On Update”节点，从“New Update”拖出线并添加自定义事件，这个添加的事件将会在动画开始后每帧都执行： <img src="'+b+'" alt=""></li></ul><h2 id="函数" tabindex="-1"><a class="header-anchor" href="#函数"><span>函数</span></a></h2><ul><li><strong>Pause/Resume</strong>： 暂停/继续动画</li><li><strong>Restart</strong>： 重新开始动画</li><li><strong>Goto</strong>： 把动画设置到指定时间点</li><li><strong>Kill/KillIfIsTweening</strong>： 强制结束动画</li><li><strong>ForceComplete</strong>： 强制把动画设置为结束</li><li><strong>IsTweening</strong>： 是否正在进行动画</li><li><strong>GetLoopCycleCount</strong>： 获取动画循环次数</li></ul><h2 id="在材质中使用ltween" tabindex="-1"><a class="header-anchor" href="#在材质中使用ltween"><span>在材质中使用LTween</span></a></h2><p>LTween提供了“Material Vector Parameter To”和“Material Scalar Parameter To”节点用于“Material Instance Dynamic”物体： <img src="'+v+'" alt=""></p>',45),A=[S];function P(G,U){return k(),L("div",null,A)}const F=C(y,[["render",P],["__file","index.html.vue"]]),R=JSON.parse('{"path":"/zh-cn/GetStarted/","title":"LTween","lang":"中文","frontmatter":{"sidebarDepth":4},"headers":[{"level":2,"title":"移动/旋转/缩放 动画","slug":"移动-旋转-缩放-动画","link":"#移动-旋转-缩放-动画","children":[]},{"level":2,"title":"延迟和缓动","slug":"延迟和缓动","link":"#延迟和缓动","children":[{"level":3,"title":"CurveFloat","slug":"curvefloat","link":"#curvefloat","children":[]}]},{"level":2,"title":"循环","slug":"循环","link":"#循环","children":[]},{"level":2,"title":"游戏暂停 和 时间缩放","slug":"游戏暂停-和-时间缩放","link":"#游戏暂停-和-时间缩放","children":[{"level":3,"title":"注意!!!","slug":"注意","link":"#注意","children":[]}]},{"level":2,"title":"更新类型","slug":"更新类型","link":"#更新类型","children":[]},{"level":2,"title":"事件","slug":"事件","link":"#事件","children":[]},{"level":2,"title":"函数","slug":"函数","link":"#函数","children":[]},{"level":2,"title":"在材质中使用LTween","slug":"在材质中使用ltween","link":"#在材质中使用ltween","children":[]}],"git":{"updatedTime":1704524489000,"contributors":[{"name":"lf2007hf","email":"707908214@qq.com","commits":2}]},"filePathRelative":"zh-cn/GetStarted/index.md"}');export{F as comp,R as data};
