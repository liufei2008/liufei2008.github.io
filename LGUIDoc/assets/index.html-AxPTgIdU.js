import{_ as t,c as e,o,a as r}from"./app-CGRYBoMb.js";const a="/LGUIDoc/assets/1-CN3NJ1MO.png",n="/LGUIDoc/assets/2-CdRdm4Ec.png",s="/LGUIDoc/assets/3-B30p_FJE.png",l={},c=r('<h1 id="lgui的屏幕空间位置投射到世界空间" tabindex="-1"><a class="header-anchor" href="#lgui的屏幕空间位置投射到世界空间"><span>LGUI的屏幕空间位置投射到世界空间</span></a></h1><p>假如我们想让一个世界空间的Actor随着一个UI元素的位置来变化，那么这个知识点就很有用了。</p><p>主要有两个节点：一个是<strong>Convert Position from LGUICanvas to Viewport</strong>，这是LGUICanvasScaler类提供的节点： <img src="'+a+'" alt=""></p><table><thead><tr><th style="text-align:left;">属性：</th><th style="text-align:left;">方法：</th></tr></thead><tbody><tr><td style="text-align:left;">Target</td><td style="text-align:left;">LGUICanvasScaler组件物体。</td></tr><tr><td style="text-align:left;">Position</td><td style="text-align:left;">LGUI屏幕空间的位置。注意左下角是0点，所以提供这个位置的UI元素需要把锚点设置为左下角，并且父物体需要是全屏幕尺寸。</td></tr><tr><td style="text-align:left;">Return Value</td><td style="text-align:left;">需要使用的屏幕空间位置，左上角是0位置。</td></tr></tbody></table><p>还有一个节点是<strong>Deproject Screen to World</strong>，这是引擎自带的节点： <img src="'+n+'" alt=""></p><p>我们可以把这些节点连成下图的样子： <img src="'+s+'" alt=""><br> 我们可以用计算结果的<em>World Position</em>和<em>World Direction</em>参数来做LineTrace。<em>Control</em>是个UIBaseActor，代表的是屏幕上的UI元素；<em>Root</em>是ScreenSpaceUIRoot的Actor，并且必须要有LGUICanvasScaler组件。</p>',6),i=[c];function d(m,p){return o(),e("div",null,i)}const _=t(l,[["render",d],["__file","index.html.vue"]]),h=JSON.parse('{"path":"/zh-cn/FAQ/DeprojectScreenToWorld/","title":"LGUI的屏幕空间位置投射到世界空间","lang":"中文","frontmatter":{},"headers":[],"git":{"updatedTime":1702371828000,"contributors":[{"name":"lf2007hf","email":"707908214@qq.com","commits":1}]},"filePathRelative":"zh-cn/FAQ/DeprojectScreenToWorld/index.md"}');export{_ as comp,h as data};
