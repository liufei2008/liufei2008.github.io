import{_ as e,o as t,c as o,a}from"./app-b6cb340a.js";const r="/LGUIDoc/assets/1-080c1929.png",n="/LGUIDoc/assets/note1-dea69527.png",s="/LGUIDoc/assets/note2-93e8335b.png",i="/LGUIDoc/assets/note3-6fff2db6.png",c={},l=a('<h1 id="prefabeditor" tabindex="-1"><a class="header-anchor" href="#prefabeditor" aria-hidden="true">#</a> PrefabEditor</h1><p>When double click a LGUIPrefab, a PrefabEditor window will be opened, it is the good place to edit prefab:<br><img src="'+r+'" alt=""></p><p><strong>[temporary_RootAgent]</strong> (or <strong>[RootAgent]</strong> in old version) is automatically created actor, which is just an temporary UIContainer that hold a LGUICanvas component, so that UI elements will be visible under it.</p><p>If you want to use your own LGUICanvas, you should remove the LGUICanvas component on <strong>[temporary_RootAgent]</strong>.</p><h2 id="note" tabindex="-1"><a class="header-anchor" href="#note" aria-hidden="true">#</a> NOTE!!!</h2><p>Sometimes we want to assign an actor variable inside PrefabEditor, we actually can&#39;t use these quick methods to choose the desired actor (the three little icon buttons), because it can only choose actors inside current level:<br><img src="'+n+'" alt=""></p><p>But how can we do it? Well there is a workaround. Check on the little lock button in the Details panel:<br><img src="'+s+'" alt=""></p><p>Then drag your actor to the variable area:<br><img src="'+i+'" alt=""><br> That&#39;s it.</p>',8),d=[l];function h(p,u){return t(),o("div",null,d)}const b=e(c,[["render",h],["__file","index.html.vue"]]);export{b as default};
