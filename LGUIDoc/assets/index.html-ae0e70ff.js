import{_ as t,o,c as e,a as u}from"./app-0f69a3bd.js";const a="/LGUIDoc/assets/1-8e440d98.png",s="/LGUIDoc/assets/2-1201b187.png",q="/LGUIDoc/assets/3-e66e299f.png",r="/LGUIDoc/assets/4-9b0d4bef.png",n="/LGUIDoc/assets/5-796ef7de.png",c="/LGUIDoc/assets/6-ca9f9a76.png",p="/LGUIDoc/assets/7-6712b49a.png",i="/LGUIDoc/assets/8-c82c602c.png",m="/LGUIDoc/assets/9-346a8bf8.png",d="/LGUIDoc/assets/10-a2e1ee29.png",l="/LGUIDoc/assets/11-c5415419.png",_="/LGUIDoc/assets/12-ef99fa25.png",I={},f=u('<h1 id="如何获取预制体中的actor或component" tabindex="-1"><a class="header-anchor" href="#如何获取预制体中的actor或component" aria-hidden="true">#</a> 如何获取预制体中的Actor或Component</h1><p>创建个UI预制体并命名为&quot;TestPrefab&quot;，预制体中的内容应该像这样： <img src="'+a+'" alt=""><br> &quot;Root&quot;是个UIContainerActor，&quot;Button&quot;是&quot;Root&quot;的子物体，&quot;Text&quot;是&quot;Button&quot;的子物体。 如果我们想修改&quot;Text&quot;物体，如何获取这个物体的引用呢？ 有两种方式可以做到，我们来试试。</p><p>首先我们需要加载这个预制体，我们可以创建个ActorComponent并命名为&quot;PrefabLoader&quot;，然后把&quot;LoadPrefab&quot;节点连接到&quot;BeginPlay&quot;，并且把&quot;TestPrefab&quot;预制体拖拽到&quot;InPrefab&quot;输入端上，这样预制体就会在运行的时候加载： <img src="'+s+'" alt=""></p><h2 id="使用actorcomponent作为媒介" tabindex="-1"><a class="header-anchor" href="#使用actorcomponent作为媒介" aria-hidden="true">#</a> 使用ActorComponent作为媒介</h2><p>创建另一个ActorComponent，这次我们用个LGUILifeCycleBehaviour作为父类，命名为&quot;Mediator&quot;： （推荐在预制体中用LGUILifeCycleBehaviour） <img src="'+q+'" alt=""></p><p>添加个&quot;UITextActor&quot;类型的变量，名字是&quot;Text&quot;，勾上&quot;Instance Editable&quot;： <img src="'+r+'" alt=""></p><p>打开&quot;TestPrefab&quot;并把&quot;Mediator&quot;拖拽到&quot;Root&quot;的组件列表： <img src="'+n+'" alt=""></p><p>在&quot;Root&quot;组件列表里选择&quot;Mediator&quot;组件，勾选&quot;Details&quot;面板的锁定按钮，然后把&quot;Text&quot;Actor拖拽到变量&quot;Text&quot;： <img src="'+c+'" alt=""></p><p>然后应用预制体修改，那么&quot;Text&quot;变量就可以指代actor引用了。</p><p>打开&quot;PrefabLoader&quot;组件，从&quot;Load Prefab&quot;节点的&quot;Return Value&quot;拖拽出线并选择&quot;Get Component by Class&quot;节点，把&quot;Component Class&quot;选择为&quot;Mediator&quot;： <img src="'+p+'" alt=""></p><p>从&quot;Get Component by Class&quot;节点的&quot;Return Value&quot;拖拽出线，找到&quot;Text&quot;属性变量，这就是&quot;Text&quot;Actor的引用，我们就可以用这个Actor来做下一步工作了： <img src="'+i+'" alt=""></p><h2 id="通过名字路径查找" tabindex="-1"><a class="header-anchor" href="#通过名字路径查找" aria-hidden="true">#</a> 通过名字路径查找</h2><p>在&quot;PrefabLoader&quot;中，从头&quot;Load Prefab&quot;节点的&quot;Return Value&quot;拖拽出线并选择&quot;Cast To UIBaseActor&quot;： <img src="'+m+'" alt=""></p><p>从&quot;As UIBase Actor&quot;拖拽出线并选择&quot;Get UIItem&quot;节点： <img src="'+d+'" alt=""></p><p>从&quot;Get UIItem&quot;节点的&quot;Return Value&quot;拖拽出线并选择&quot;Find Child by Display Name&quot;节点，在&quot;In Name&quot;参数中输入&quot;Button/Text&quot;： <img src="'+l+'" alt=""></p><p>从&quot;Find Child by Display Name&quot;节点的&quot;Return Value&quot;拖拽出线并选择&quot;Cast To UIText&quot;： <img src="'+_+'" alt=""></p><p>这个&quot;As UIText&quot;就是我们要找的物体。 <strong>注意</strong> &quot;FindChildByDisplayName&quot;节点只能用于LGUI的UI元素，因为只有LGUI的UI元素有固定的&quot;DisplayName&quot;。详细内容可看<a href="../FindChildByDisplayName">这篇</a>。</p>',17),h=[f];function g(U,b){return o(),e("div",null,h)}const x=t(I,[["render",g],["__file","index.html.vue"]]);export{x as default};
