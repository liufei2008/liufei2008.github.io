import{_ as t,c as e,o,a as s}from"./app-CGRYBoMb.js";const n="/LGUIDoc/assets/step1-kZCJ66Wb.png",a="/LGUIDoc/assets/step2-By_QNfIF.png",r="/LGUIDoc/assets/step3-D-kgK9aq.png",i="/LGUIDoc/assets/step4-DPTRRm2e.png",l="/LGUIDoc/assets/step5-FboTmPo9.png",p="/LGUIDoc/assets/step6-V8mNixRC.png",c="/LGUIDoc/assets/step7-BxvkrLL0.png",u="/LGUIDoc/assets/step7.1-BwlaKxvz.png",m="/LGUIDoc/assets/step8-D2ob9BOs.png",g="/LGUIDoc/assets/step9-CCTgLs5D.png",q="/LGUIDoc/assets/step10-BAM9Gqfp.png",h="/LGUIDoc/assets/step11-ClOv-0FY.png",d="/LGUIDoc/assets/step12-BPAZ1m8f.png",_="/LGUIDoc/assets/step13-obDKIZPC.png",w="/LGUIDoc/assets/step14-CYOS-aWn.png",L="/LGUIDoc/assets/step15-BFtPjC-6.png",b="/LGUIDoc/assets/step16-CO376Eei.png",f="/LGUIDoc/assets/step17-UugkzYfL.png",T="/LGUIDoc/assets/step18-DQqzo86Q.png",C={},D=s('<h1 id="在-scenecomponent-使用-ltween" tabindex="-1"><a class="header-anchor" href="#在-scenecomponent-使用-ltween"><span>在 SceneComponent 使用 LTween</span></a></h1><h2 id="移动-旋转-缩放-动画" tabindex="-1"><a class="header-anchor" href="#移动-旋转-缩放-动画"><span>移动/旋转/缩放 动画</span></a></h2><p>创建个新的默认场景, 放置个立方体到场景里, 设置 &quot;Mobility&quot; 为 &quot;Movable“, 设置位置为 (0, 0, 80):<br><img src="'+n+'" alt=""></p><p>创建个 ActorComponent 蓝图, 命名为 &quot;TweenAnimation&quot;:<br><img src="'+a+'" alt=""></p><p>编辑 TweenAnimation 蓝图内容像下图这样, 这样将会把立方体的相对坐标的x轴移动到 &quot;EndValue&quot;:<br><img src="'+r+'" alt=""></p><p>拖拽 TweenAnimation 蓝图到立方体上作为其组件，然后点击 Play 运行, 立方体将会用0.5秒种的时间移动到 (500, 0, 80):<br><img src="'+i+'" alt=""></p><p>这个动画看起来很简单, 我们来把它弄得更有趣些. 双击打开 TweenAnimation 蓝图, 修改 &quot;Duration&quot; 值为 3.0. 像下图这样添加 &quot;Local Rotator To&quot; 节点:<br><img src="'+l+'" alt=""></p><p>点击 Play 运行, 立方体将会移动和旋转:<br><img src="'+p+'" alt=""></p><p>像下图这样添加 &quot;Local Scale To&quot; 节点, 然后点击 Play 运行:<br><img src="'+c+'" alt=""></p><p>你也可以在 &quot;TWeen&quot; 分类里找到其他的一些动画方法 &quot;LTween&quot;:<br><img src="'+u+'" alt=""></p><h2 id="延迟和缓动方式" tabindex="-1"><a class="header-anchor" href="#延迟和缓动方式"><span>延迟和缓动方式</span></a></h2><p>删除 &quot;Local Position X To&quot; 和 &quot;Local Scale To&quot; 节点, 保留 &quot;Local Rotator To&quot; 节点, 然后设置 &quot;Delay&quot; 参数为 1.0, 点击 Play 运行 (动画将在运行后1秒钟开始):<br><img src="'+m+'" alt=""></p><p>LTween 提供了多个缓动类型, 点击 &quot;Ease&quot; 然后选择你需要的缓动方式. <a href="https://www.inkfood.com/tween-3d-objects/" target="_blank" rel="noopener noreferrer">这个网站</a> 可以作为缓动方式的参考 (下图也是来源于这个网站 https://www.inkfood.com/tween-3d-objects/):<br><img src="https://www.inkfood.com/wordprez/wp-content/uploads/easingFunctions.png" alt=""></p><h3 id="缓动曲线" tabindex="-1"><a class="header-anchor" href="#缓动曲线"><span>缓动曲线</span></a></h3><p>有个特殊的缓动类型是 &quot;CurveFloat&quot;:<br><img src="'+g+'" alt=""></p><p>这个类型可以让我们用个 CurveFloat 来控制我们的动画. 以下步骤将会告诉我们如何去使用: 右键点击 Content 的空白出, 选择 &quot;Miscellaneous&quot;-&gt;&quot;Curve&quot;:<br><img src="'+q+'" alt=""></p><p>在弹出菜单中选择 &quot;CurveFloat&quot;:<br><img src="'+h+'" alt=""></p><p>把创建出来的资产命名为 &quot;AnimationCurve&quot;:<br><img src="'+d+'" alt=""></p><p>LTween 把水平方向的0到1的范围当作动画时间的开始和结束, 在这个范围内可以做你想要的任何的曲线:<br><img src="'+_+'" alt=""></p><p>打开 &quot;TweenAnimation&quot; 蓝图，从&quot;Local Rotator To&quot; 节点的 &quot;Return Value&quot; 拉线出来, 然后天津个新的节点 &quot;Set Curve Float&quot;, 然后在 &quot;New Curve Float&quot; 参数里选择 &quot;AnimationCurve&quot;, 这样 CurveFloat 就能起作用了:<br><img src="'+w+'" alt=""></p><h2 id="循环" tabindex="-1"><a class="header-anchor" href="#循环"><span>循环</span></a></h2><p>循环在补间动画里也是个非常重要的部分.<br> 从 &quot;Set Curve Float&quot; 节点后面的 &quot;Return Value&quot; 拉线出来， 选择 &quot;Set Loop&quot; 节点:<br><img src="'+L+'" alt=""></p><p>点击 &quot;New Loop Type&quot; 可以看到有4个选项:</p><ul><li><strong>Once</strong> 动画执行一次，没有循环</li><li><strong>Restart</strong> 每次动画循环都从头开始</li><li><strong>Yoyo</strong> 在每次动画循环结束后都会交替方向</li><li><strong>Incremental</strong> 在每次动画循环结束后都增加，就像这样： A to B, B to B+(A-B), ...<br><img src="'+b+'" alt=""></li></ul><p>不要忘了设置 &quot;New Loop Count&quot;, 0 或 1 代表没有循环, -1 代表无限循环.</p><h2 id="事件" tabindex="-1"><a class="header-anchor" href="#事件"><span>事件</span></a></h2><p>动画事件也是补间动画里不能忽略的功能. LTween 提供了这些事件:</p><ul><li><strong>OnStart</strong> 当动画开始的时候执行, 如果有延迟(Delay), 那么将在延迟之后执行</li><li><strong>OnUpdate</strong> 当动画开始后每一帧都执行</li><li><strong>OnComplete</strong> 当动画完成的时候执行, 如果有循环那么就在所有循环都结束之后再执行</li><li><strong>OnCycleStart</strong> 动画循环的每一次开始的时候执行</li><li><strong>OnCycleComplete</strong> 动画循环的每一次结束的时候执行 设置这些事件也很简单. 以 OnUpdata 为例, 从 &quot;Return Value&quot; 拉线出来选择 &quot;On Update&quot; 节点, 从 &quot;New Update&quot; 拉线出来添加新的自定义事件, 这个事件将会在动画开始后的每一帧执行:<br><img src="'+f+'" alt=""></li></ul><h2 id="functions" tabindex="-1"><a class="header-anchor" href="#functions"><span>Functions</span></a></h2><ul><li><strong>Pause/Resume</strong> Pause/Resume this animation</li><li><strong>Restart</strong> Restart animation</li><li><strong>Goto</strong> Send the tween to the given position in time</li><li><strong>Kill/KillIfIsTweening</strong> Kill the tween if the animation already start</li><li><strong>ForceComplete</strong> Force complete this animation at this frame, call OnComplete</li></ul><h2 id="use-ltween-for-material" tabindex="-1"><a class="header-anchor" href="#use-ltween-for-material"><span>Use LTween for Material</span></a></h2><p>LTween provide &quot;Material Vector Parameter To&quot; and &quot;Material Scalar Parameter To&quot; nodes for &quot;Material Instance Dynamic&quot; objects:<br><img src="'+T+'" alt=""></p>',32),v=[D];function U(I,G){return o(),e("div",null,v)}const k=t(C,[["render",U],["__file","index.html.vue"]]),F=JSON.parse('{"path":"/zh-cn/LTween/GetStarted/","title":"在 SceneComponent 使用 LTween","lang":"中文","frontmatter":{"sidebarDepth":4},"headers":[{"level":2,"title":"移动/旋转/缩放 动画","slug":"移动-旋转-缩放-动画","link":"#移动-旋转-缩放-动画","children":[]},{"level":2,"title":"延迟和缓动方式","slug":"延迟和缓动方式","link":"#延迟和缓动方式","children":[{"level":3,"title":"缓动曲线","slug":"缓动曲线","link":"#缓动曲线","children":[]}]},{"level":2,"title":"循环","slug":"循环","link":"#循环","children":[]},{"level":2,"title":"事件","slug":"事件","link":"#事件","children":[]},{"level":2,"title":"Functions","slug":"functions","link":"#functions","children":[]},{"level":2,"title":"Use LTween for Material","slug":"use-ltween-for-material","link":"#use-ltween-for-material","children":[]}],"git":{"updatedTime":1685406463000,"contributors":[{"name":"lf2007hf","email":"707908214@qq.com","commits":1}]},"filePathRelative":"zh-cn/LTween/GetStarted/index.md"}');export{k as comp,F as data};
