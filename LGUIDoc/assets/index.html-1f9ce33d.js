import{_ as a,r as n,o as r,c as i,b as t,d as o,e as c,a as e}from"./app-fd6a55c5.js";const l="/LGUIDoc/assets/step1-3cb62077.png",p="/LGUIDoc/assets/step2-5e06a3e9.png",u="/LGUIDoc/assets/step3-0633719d.png",m="/LGUIDoc/assets/step4-3363ca28.png",d="/LGUIDoc/assets/step5-993186c7.png",g="/LGUIDoc/assets/step6-164585c7.png",q="/LGUIDoc/assets/step7-8458110c.png",h="/LGUIDoc/assets/step7.1-97c33a5f.png",_="/LGUIDoc/assets/step8-139e5c0a.png",b="/LGUIDoc/assets/step9-d3b8d20c.png",L="/LGUIDoc/assets/step10-61bf1af6.png",w="/LGUIDoc/assets/step11-15706165.png",f="/LGUIDoc/assets/step12-d8f8f513.png",I="/LGUIDoc/assets/step13-1f0e486c.png",T="/LGUIDoc/assets/step14-0db677ee.png",U="/LGUIDoc/assets/step15-85ccaa61.png",D="/LGUIDoc/assets/step16-a421aa76.png",C="/LGUIDoc/assets/step17-2a68c2a2.png",G="/LGUIDoc/assets/step18-4d17ab46.png",x={},v=e('<h1 id="在-scenecomponent-使用-ltween" tabindex="-1"><a class="header-anchor" href="#在-scenecomponent-使用-ltween" aria-hidden="true">#</a> 在 SceneComponent 使用 LTween</h1><h2 id="移动-旋转-缩放-动画" tabindex="-1"><a class="header-anchor" href="#移动-旋转-缩放-动画" aria-hidden="true">#</a> 移动/旋转/缩放 动画</h2><p>创建个新的默认场景, 放置个立方体到场景里, 设置 &quot;Mobility&quot; 为 &quot;Movable“, 设置位置为 (0, 0, 80):<br><img src="'+l+'" alt=""></p><p>创建个 ActorComponent 蓝图, 命名为 &quot;TweenAnimation&quot;:<br><img src="'+p+'" alt=""></p><p>编辑 TweenAnimation 蓝图内容像下图这样, 这样将会把立方体的相对坐标的x轴移动到 &quot;EndValue&quot;:<br><img src="'+u+'" alt=""></p><p>拖拽 TweenAnimation 蓝图到立方体上作为其组件，然后点击 Play 运行, 立方体将会用0.5秒种的时间移动到 (500, 0, 80):<br><img src="'+m+'" alt=""></p><p>这个动画看起来很简单, 我们来把它弄得更有趣些. 双击打开 TweenAnimation 蓝图, 修改 &quot;Duration&quot; 值为 3.0. 像下图这样添加 &quot;Local Rotator To&quot; 节点:<br><img src="'+d+'" alt=""></p><p>点击 Play 运行, 立方体将会移动和旋转:<br><img src="'+g+'" alt=""></p><p>像下图这样添加 &quot;Local Scale To&quot; 节点, 然后点击 Play 运行:<br><img src="'+q+'" alt=""></p><p>你也可以在 &quot;TWeen&quot; 分类里找到其他的一些动画方法 &quot;LTween&quot;:<br><img src="'+h+'" alt=""></p><h2 id="延迟和缓动方式" tabindex="-1"><a class="header-anchor" href="#延迟和缓动方式" aria-hidden="true">#</a> 延迟和缓动方式</h2><p>删除 &quot;Local Position X To&quot; 和 &quot;Local Scale To&quot; 节点, 保留 &quot;Local Rotator To&quot; 节点, 然后设置 &quot;Delay&quot; 参数为 1.0, 点击 Play 运行 (动画将在运行后1秒钟开始):<br><img src="'+_+'" alt=""></p>',12),y={href:"https://www.inkfood.com/tween-3d-objects/",target:"_blank",rel:"noopener noreferrer"},F=t("br",null,null,-1),R=t("img",{src:"https://www.inkfood.com/wordprez/wp-content/uploads/easingFunctions.png",alt:""},null,-1),S=e('<h3 id="缓动曲线" tabindex="-1"><a class="header-anchor" href="#缓动曲线" aria-hidden="true">#</a> 缓动曲线</h3><p>有个特殊的缓动类型是 &quot;CurveFloat&quot;:<br><img src="'+b+'" alt=""></p><p>这个类型可以让我们用个 CurveFloat 来控制我们的动画. 以下步骤将会告诉我们如何去使用: 右键点击 Content 的空白出, 选择 &quot;Miscellaneous&quot;-&gt;&quot;Curve&quot;:<br><img src="'+L+'" alt=""></p><p>在弹出菜单中选择 &quot;CurveFloat&quot;:<br><img src="'+w+'" alt=""></p><p>把创建出来的资产命名为 &quot;AnimationCurve&quot;:<br><img src="'+f+'" alt=""></p><p>LTween 把水平方向的0到1的范围当作动画时间的开始和结束, 在这个范围内可以做你想要的任何的曲线:<br><img src="'+I+'" alt=""></p><p>打开 &quot;TweenAnimation&quot; 蓝图，从&quot;Local Rotator To&quot; 节点的 &quot;Return Value&quot; 拉线出来, 然后天津个新的节点 &quot;Set Curve Float&quot;, 然后在 &quot;New Curve Float&quot; 参数里选择 &quot;AnimationCurve&quot;, 这样 CurveFloat 就能起作用了:<br><img src="'+T+'" alt=""></p><h2 id="循环" tabindex="-1"><a class="header-anchor" href="#循环" aria-hidden="true">#</a> 循环</h2><p>循环在补间动画里也是个非常重要的部分.<br> 从 &quot;Set Curve Float&quot; 节点后面的 &quot;Return Value&quot; 拉线出来， 选择 &quot;Set Loop&quot; 节点:<br><img src="'+U+'" alt=""></p><p>点击 &quot;New Loop Type&quot; 可以看到有4个选项:</p><ul><li><strong>Once</strong> 动画执行一次，没有循环</li><li><strong>Restart</strong> 每次动画循环都从头开始</li><li><strong>Yoyo</strong> 在每次动画循环结束后都会交替方向</li><li><strong>Incremental</strong> 在每次动画循环结束后都增加，就像这样： A to B, B to B+(A-B), ...<br><img src="'+D+'" alt=""></li></ul><p>不要忘了设置 &quot;New Loop Count&quot;, 0 或 1 代表没有循环, -1 代表无限循环.</p><h2 id="事件" tabindex="-1"><a class="header-anchor" href="#事件" aria-hidden="true">#</a> 事件</h2><p>动画事件也是补间动画里不能忽略的功能. LTween 提供了这些事件:</p><ul><li><strong>OnStart</strong> 当动画开始的时候执行, 如果有延迟(Delay), 那么将在延迟之后执行</li><li><strong>OnUpdate</strong> 当动画开始后每一帧都执行</li><li><strong>OnComplete</strong> 当动画完成的时候执行, 如果有循环那么就在所有循环都结束之后再执行</li><li><strong>OnCycleStart</strong> 动画循环的每一次开始的时候执行</li><li><strong>OnCycleComplete</strong> 动画循环的每一次结束的时候执行 设置这些事件也很简单. 以 OnUpdata 为例, 从 &quot;Return Value&quot; 拉线出来选择 &quot;On Update&quot; 节点, 从 &quot;New Update&quot; 拉线出来添加新的自定义事件, 这个事件将会在动画开始后的每一帧执行:<br><img src="'+C+'" alt=""></li></ul><h2 id="functions" tabindex="-1"><a class="header-anchor" href="#functions" aria-hidden="true">#</a> Functions</h2><ul><li><strong>Pause/Resume</strong> Pause/Resume this animation</li><li><strong>Restart</strong> Restart animation</li><li><strong>Goto</strong> Send the tween to the given position in time</li><li><strong>Kill/KillIfIsTweening</strong> Kill the tween if the animation already start</li><li><strong>ForceComplete</strong> Force complete this animation at this frame, call OnComplete</li></ul><h2 id="use-ltween-for-material" tabindex="-1"><a class="header-anchor" href="#use-ltween-for-material" aria-hidden="true">#</a> Use LTween for Material</h2><p>LTween provide &quot;Material Vector Parameter To&quot; and &quot;Material Scalar Parameter To&quot; nodes for &quot;Material Instance Dynamic&quot; objects:<br><img src="'+G+'" alt=""></p>',19);function A(O,P){const s=n("ExternalLinkIcon");return r(),i("div",null,[v,t("p",null,[o('LTween 提供了多个缓动类型, 点击 "Ease" 然后选择你需要的缓动方式. '),t("a",y,[o("这个网站"),c(s)]),o(" 可以作为缓动方式的参考 (下图也是来源于这个网站 https://www.inkfood.com/tween-3d-objects/):"),F,R]),S])}const k=a(x,[["render",A],["__file","index.html.vue"]]);export{k as default};
