import{_ as e,c as t,o as a,a as o}from"./app-CVfq4vAg.js";const r="/LGUIDoc/assets/1-skrwekFs.png",s="/LGUIDoc/assets/2-B50HVlmH.png",n="/LGUIDoc/assets/NormalMap-CIbwAYqj.png",l="/LGUIDoc/assets/3-Du5ulx8S.png",i="/LGUIDoc/assets/4-CUitNAPW.png",p="/LGUIDoc/assets/5-C9wZ-1hv.png",c="/LGUIDoc/assets/6-Cst2sbnd.png",d="/LGUIDoc/assets/7-BNQSEXMn.png",m="/LGUIDoc/assets/8-7YhPzgVI.png",u="/LGUIDoc/assets/9-B1Y2jPsq.png",g="/LGUIDoc/assets/10-DqJX83lN.png",h={},U=o('<h1 id="world-space-ue-renderer" tabindex="-1"><a class="header-anchor" href="#world-space-ue-renderer"><span>World Space - UE Renderer</span></a></h1><p><strong>World Space - UE Renderer</strong> use engine&#39;s default render pipeline to render UI elements. By default UI elements will be treated as transparent meshes, so the UI will be affected by post-process.</p><h2 id="create" tabindex="-1"><a class="header-anchor" href="#create"><span>Create</span></a></h2><p>Select &quot;LGUI Editor Tools&quot;-&gt;&quot;Basic Setup&quot;-&gt;&quot;World Space - UE Renderer&quot;: <img src="'+r+'" alt=""></p><p>Then a &quot;WorldSpaceUIRoot_UERenderer&quot; will be created: <img src="'+s+'" alt=""></p><h2 id="use-lighting-and-normalmap" tabindex="-1"><a class="header-anchor" href="#use-lighting-and-normalmap"><span>Use lighting and normalmap</span></a></h2><p>Prepare a normal map: <img src="'+n+'" alt=""></p><p>Drag the normal map to content folder: <img src="'+l+'" alt=""></p><p>Delete &quot;Frame&quot; and &quot;Info&quot; actor, right click the down arrow button and choose &quot;Create UI Element&quot;-&gt;&quot;UISprite&quot;, and name it &quot;NormalMapUI&quot;: <img src="'+i+'" alt=""></p><p>Create a new material, name it &quot;NormalMapUIMat&quot;, make it a very simple material like this: <img src="'+p+'" alt=""><strong>UISprite take texcoord0 as packed atlas uv</strong>, so we use texcoord1 as uv input.<br><strong>UISprite will use the atlas texture and set to MainTexture parameter in material</strong>.</p><p>Select &quot;NormalMapUI&quot; actor, find &quot;Custom Material&quot; property, and drag the &quot;NormalMapUIMat&quot; to &quot;Custom Material&quot;: <img src="'+c+'" alt=""></p><p>Create a light in the level if these is no one present: <img src="'+d+'" alt=""></p><p>The &quot;NormalMapUI&quot; looks not correct in the viewport. Because by default, LGUI only set the first texcoord and no normal or tangent data, so we need to tell LGUICanvas to provide more data, by check the &quot;Additional Shader Channels&quot; flags: <img src="'+m+'" alt=""></p><p>Now adjust light angle and position, see the bumped surface on UI: <img src="'+u+'" alt=""></p><p>Check <a href="https://github.com/liufei2008/LGUISampleProject" target="_blank" rel="noopener noreferrer">SampleProject</a> on github, you will find more infomation about lighing on 3D UI: <img src="'+g+'" alt=""></p>',15),_=[U];function q(I,f){return a(),t("div",null,_)}const b=e(h,[["render",q],["__file","index.html.vue"]]),w=JSON.parse('{"path":"/Rendering/WorldSpaceUERenderer/","title":"World Space - UE Renderer","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Create","slug":"create","link":"#create","children":[]},{"level":2,"title":"Use lighting and normalmap","slug":"use-lighting-and-normalmap","link":"#use-lighting-and-normalmap","children":[]}],"git":{"updatedTime":1685406463000,"contributors":[{"name":"lf2007hf","email":"707908214@qq.com","commits":1}]},"filePathRelative":"Rendering/WorldSpaceUERenderer/index.md"}');export{b as comp,w as data};
