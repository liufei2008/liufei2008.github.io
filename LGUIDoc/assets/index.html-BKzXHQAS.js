import{_ as e,c as t,o as a,a as i}from"./app-CVfq4vAg.js";const s="/LGUIDoc/assets/1-BMqsuf6c.png",n="/LGUIDoc/assets/2-j-n8GclB.png",l={},m=i('<h1 id="根据名字查找子物体" tabindex="-1"><a class="header-anchor" href="#根据名字查找子物体"><span>根据名字查找子物体</span></a></h1><h4 id="_1-uiitem的显示名-displayname" tabindex="-1"><a class="header-anchor" href="#_1-uiitem的显示名-displayname"><span>1. UIItem的显示名(DisplayName)</span></a></h4><p>UE引擎的Actor不存在固定的名字，在Outliner显示的名字只是编辑器里可用。但是有时我们需要根据名字来找到UI物体。LGUI的UIItem组件就提供了运行时可用的属性<strong>DisplayName</strong>，跟Outliner显示的Actor名字一致： <img src="'+s+'" alt=""></p><h4 id="_2-displayname相关使用方法" tabindex="-1"><a class="header-anchor" href="#_2-displayname相关使用方法"><span>2. <em>DisplayName</em>相关使用方法：</span></a></h4><p><img src="'+n+'" alt=""></p><table><thead><tr><th style="text-align:left;">方法：</th><th style="text-align:left;">描述：</th></tr></thead><tbody><tr><td style="text-align:left;">Find Child by Display Name (In Name)</td><td style="text-align:left;">在子物体中搜索并返回名字与输入名字一致的UIItem。支持多层级的搜索，比如：InName = &quot;Content/ListItem/NameLabel&quot;，<em>In Name</em>参数需要注意大小写。</td></tr><tr><td style="text-align:left;">Find Child Array by Display Name (In Name)</td><td style="text-align:left;">与&quot;Find Child by Display Name&quot;用法一样，不同之处是返回所有符合条件的子物体的数组。</td></tr></tbody></table><h4 id="_3-修改uiitem的显示名-displayname" tabindex="-1"><a class="header-anchor" href="#_3-修改uiitem的显示名-displayname"><span>3. 修改UIItem的显示名(DisplayName)</span></a></h4><p>就像之前描述的，UIItem的<em>DisplayName</em>跟Outliner显示的Actor的名字一样，所以只需修改Outliner的显示名字就行。 在运行时也可以调用UIItem的<em>SetDisplayName</em>方法来修改。</p>',8),d=[m];function r(o,c){return a(),t("div",null,d)}const h=e(l,[["render",r],["__file","index.html.vue"]]),y=JSON.parse('{"path":"/zh-cn/FAQ/FindChildByDisplayName/","title":"根据名字查找子物体","lang":"中文","frontmatter":{},"headers":[],"git":{"updatedTime":1702371828000,"contributors":[{"name":"lf2007hf","email":"707908214@qq.com","commits":1}]},"filePathRelative":"zh-cn/FAQ/FindChildByDisplayName/index.md"}');export{h as comp,y as data};
