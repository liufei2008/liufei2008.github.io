import{_ as i,r as n,o as c,c as l,b as e,d as t,e as o,w as r,a as s}from"./app-6f31cbcb.js";const d="/LGUIDoc/assets/1-956159b2.png",h="/LGUIDoc/assets/2-6577c144.png",p="/LGUIDoc/assets/3-15349693.png",f="/LGUIDoc/assets/4-c8390d5b.png",u="/LGUIDoc/assets/5-a113890b.png",m="/LGUIDoc/assets/PrefabEditor_1-16199c07.png",b="/LGUIDoc/assets/PrefabEditor_2-f2cda1fc.png",g="/LGUIDoc/assets/PrefabEditor_3-48a495b7.png",P="/LGUIDoc/assets/PrefabEditor_4-b3125d62.png",_="/LGUIDoc/assets/PrefabEditor_5-4c85fc9a.png",w="/LGUIDoc/assets/LevelEditor_1-d7899339.png",y="/LGUIDoc/assets/RuntimeUse_1-0288d842.png",v="/LGUIDoc/assets/RuntimeUse_2-3c5a6324.png",L="/LGUIDoc/assets/RuntimeUse_3-8f6b4b71.png",I="/LGUIDoc/assets/RuntimeUse_4-23216577.png",U="/LGUIDoc/assets/RuntimeUse_5-20263da4.png",q="/LGUIDoc/assets/RuntimeUse_6-a9db1eb8.png",G="/LGUIDoc/assets/NestedPrefab_1-53be5ac8.png",A="/LGUIDoc/assets/NestedPrefab_2-9e4fd17d.png",C="/LGUIDoc/assets/NestedPrefab_3-29b51756.png",k="/LGUIDoc/assets/NestedPrefab_4-684e54f2.png",E={},x=s('<h1 id="lgui-prefab" tabindex="-1"><a class="header-anchor" href="#lgui-prefab" aria-hidden="true">#</a> LGUI Prefab</h1><p>Prefabs are collections of actors that can be stored in an asset and instanced into a level, it is not limited on UI element, you can use almost all actor types in LGUIPrefab.</p><p>Quite often when constructing a level you want to create some arrangement of actors, and then re-use that collection in the same or other levels. An example might be a torch, which consists of some static meshes and some lights. Prefabs allows you to create this kind of collection once, and then save it in as a Prefab asset. You can then select the Prefab in the Content Browser, and add it many times through the level.</p><p>Prefabs can have changes made to them in a level, and those changes can then be propagated to all existing instances of that Prefab. Because this uses Unreal&#39;s property system, only properties still at their original prefab defaults will be updated when the Prefab changes. For example, imagine you have a Prefab that contains a yellow light, and you then change one instance of the Prefab to have a blue light. Then you change the Prefab itself to have a green light. Only instances who&#39;s light is still yellow will have the color changed to green. This is very useful, as it allows you modify, or even remove, parts of a Prefab instance to make it fit a particular usage, but also receive updates to the Prefab.</p><h2 id="create-a-prefab" tabindex="-1"><a class="header-anchor" href="#create-a-prefab" aria-hidden="true">#</a> Create a Prefab</h2><p>To create a new Prefab, first attach the actors to a single root actor in the level:<br><img src="'+d+'" alt=""> Then select the root actor, right-click on LGUI column and choose <strong>Create Prefab</strong> from the context menu.<br><img src="'+h+'" alt=""> Then a dialog window will show, you can choose a place and name to save the asset:<br><img src="'+p+'" alt=""> Click &quot;Save&quot; and then a Prefab asset will appear in content folder, and the actors of this prefab will show &quot;Prefab&quot; icon on the LGUI column:<br><img src="'+f+'" alt=""> Now we can delete the actors in level. Right-click on LGUI column of root actor and choose &quot;Destroy Actors&quot;:<br><img src="'+u+'" alt=""></p><h2 id="edit-prefab" tabindex="-1"><a class="header-anchor" href="#edit-prefab" aria-hidden="true">#</a> Edit Prefab</h2><p>There are two ways to eidt/modify existing prefabs.</p><h3 id="edit-prefab-in-lgui-prefab-editor" tabindex="-1"><a class="header-anchor" href="#edit-prefab-in-lgui-prefab-editor" aria-hidden="true">#</a> Edit Prefab in LGUI-Prefab-Editor</h3><p>Just double-click the Prefab asset and will bring-up a LGUI-Prefab-Editor window: <img src="'+m+'" alt=""><em>LGUI will automatically create a root actor named &quot;[temporary_RootAgent]&quot;, as the name means this actor is temporary created just as a root holder.</em><br> In the LGUI-Prefab-Editor window, you can do anything you want to edit/modify the prefab. Lets edit something for example.</p><p>Select &quot;Cube&quot; actor and right-click on LGUI column then select &quot;Create Actor&quot;-&gt;&quot;All Actors&quot; then typein &quot;StaticMesh&quot;, this will create a StaticMeshActor under &quot;Cube&quot; actor:<br><img src="'+b+'" alt=""><img src="'+g+'" alt=""> Rename the actor to &quot;Sphere&quot; and assign a sphere static mesh to it:<br><img src="'+P+'" alt=""></p><p>Now the important part, click-on &quot;Apply&quot; button on the left-top size of the editor window:<br><img src="'+_+'" alt=""></p><p>The &quot;Apply&quot; button will save your changed properties to Prefab asset, so always rememeber to hit it.</p>',13),D=s('<h3 id="edit-prefab-in-level-editor" tabindex="-1"><a class="header-anchor" href="#edit-prefab-in-level-editor" aria-hidden="true">#</a> Edit Prefab in Level-Editor</h3><p>Draw your Prefab asset to Level-Editor&#39;s viewport, this will create a instance of the Prefab asset: <img src="'+w+'" alt=""><em>Note, if you select a actor in Level-Editor then drag-drop the Prefab, then the created Prefab instance will attach to the selected actor.</em></p><p>When edit a Prefab instance in Level-Editor, LGUI actually consider it as a Sub-Prefab, so features and limititions are same, see <em>Nested Prefab and Property Override</em> section below.</p><h2 id="load-prefab-at-runtime" tabindex="-1"><a class="header-anchor" href="#load-prefab-at-runtime" aria-hidden="true">#</a> Load Prefab at runtime</h2><p>LGUIPrefab provide a some function to load it at runtime, you can easily call it in Blueprint and c++: <img src="'+y+'" alt=""><strong>LoadPrefab</strong>: Most commonly used function</p><ul><li>InParent: Provide a SceneComponent as parent, so the loaded Prefab&#39;s root actor will attach to the parent.</li><li>SetRelativeTransformToIdentity: true- Reset the loaded Prefab&#39;s root actor&#39;s transform value; false- Keep origin value. <strong>LoadPrefabWithTransform</strong>: Replace the loaded Prefab&#39;s root actor&#39;s transform value with provided one.<br><strong>LoadPrefabWithReplacement</strong>: This function give us an opportunity to replace the Prefab&#39;s referenced assets or class before load the Prefab. Useful in the case that, we create a PrefabA, and a component CompA at the root actor to manage the PrefabA, then we create a CompB which have the same properties as CompA, but with different function implementation, then we can use this function to load PrefabA and replace class from CompA to CompB; But remember, Prefab serialize depend on UProperty, so CompA and CompB must have same UProperty.</li><li>InReplaceAssetMap: Map from asset to another, maybe a static mesh.</li><li>InReplaceClassMap: Map from class to another, in the above example, we can map CompA to CompB.</li></ul><p>Lets have a test. Create a ActorBlueprint with name &quot;TestLoad&quot;, open it in BlueprintEditor, add variable with name &quot;Prefab&quot; and type &quot;LGUIPrefab&quot;, assign the Prefab asset we just created above, link the node like the shot: <img src="'+v+'" alt=""> Now drag the actor &quot;TestLoad&quot; to LevelEditor&#39;s viewport then hit play, you will see the Prefab is successfully loaded and attach to &quot;TestLoad&quot; actor: <img src="'+L+'" alt=""></p><h3 id="initialize-when-load-prefab-at-runtime" tabindex="-1"><a class="header-anchor" href="#initialize-when-load-prefab-at-runtime" aria-hidden="true">#</a> Initialize when load Prefab at runtime</h3><p>LGUIPrefab use it&#39;s own serialization policy and it is late than &quot;BeginPlay&quot; execute, so properties are not ready when use &quot;BeginPlay&quot;, so a replacement for &quot;BeginPlay&quot; must use to do the initialization job.<br> LGUIPrefab provide two ways to achieve this:</p>',9),B=e("strong",null,"LGUILifeCycleBehaviour",-1),R=e("strong",null,"LGUIPrefabInterface",-1),T=s('<p>Lets have a test. Create a ActorComponent implement from LGUILifeCycleBehaviour with name &quot;TestInitialize&quot;, open it in BlueprintEditor, you will see &quot;Awake&quot; event is created by default: <img src="'+I+'" alt=""> Drag out from &quot;Awake&quot; and link a &quot;PrintString&quot; node: <img src="'+U+'" alt=""> Double click on your Prefab asset to open LGUI-Prefab-Editor, and drag TestInitialize component to any actor in prefab, then hit &quot;Apply&quot;: <img src="'+q+'" alt=""> Now hit play and you will see printed info right after the Prefab is loaded.</p><h2 id="nested-prefab-and-property-override" tabindex="-1"><a class="header-anchor" href="#nested-prefab-and-property-override" aria-hidden="true">#</a> Nested Prefab and Property Override</h2><p>Nested Prefab means you can include Prefab instances inside other Prefabs. Nested Prefabs retain their links to their own Prefab Assets, while also forming part of another Prefab Asset.<br> How to create a nested Prefab? This is simple, double click on Prefab asset to open a LGUI-Prefab-Editor, click a actor to select it as parent, then drag another prefab to the LGUI-Prefab-Editor&#39;s viewport, then you will find a instance of Prefab is created inside LGUI-Prefab-Editor: <img src="'+G+'" alt=""> Prefab can maintain&#39;s default property, and track changed property values for later <em>Apply</em> or <em>Revert</em>. Example, if I change the light color to red: <img src="'+A+'" alt=""> Goto Sub-Prefab&#39;s root Actor and right click LGUI column, you will find &quot;Prefab Override Properties&quot;, click it and you can see the modified property: <img src="'+C+'" alt=""> You can <em>Revert</em> the modified property to Sub-Prefab&#39;s default value, or <em>Apply</em> the value to change the Sub-Prefab&#39;s default value.</p><p>There are some limitations when edit Sub-Prefab:</p><ul><li>Can&#39;t delete or remove Actor.</li><li>Can&#39;t delete or remove ActorComponent.</li><li>Can&#39;t change Actor&#39;s attachement.</li></ul><p>If we try to attach a actor to another, a message will showup to prevent it: <img src="'+k+'" alt=""></p>',6);function N(S,z){const a=n("RouterLink");return c(),l("div",null,[x,e("p",null,[t("See "),o(a,{to:"/PrefabWorkflow/PrefabEditor/"},{default:r(()=>[t("PrefabEditor")]),_:1})]),D,e("ul",null,[e("li",null,[o(a,{to:"/PrefabWorkflow/LGUILifeCycleBehaviour/"},{default:r(()=>[B]),_:1}),t(": You can create a ActorComponent extend from LGUILifeCycleBehaviour, and attach the component to your actor inside Prefab.")]),e("li",null,[o(a,{to:"/PrefabWorkflow/LGUIPrefabInterface/"},{default:r(()=>[R]),_:1}),t(": Both Actor and ActorComponent can implement this interface.")])]),T])}const W=i(E,[["render",N],["__file","index.html.vue"]]);export{W as default};
