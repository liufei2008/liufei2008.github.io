import{_ as t,o as s,c as e,a}from"./app-18a1a2ce.js";const o="/LGUIDoc/assets/step1-edb2c3a6.png",p="/LGUIDoc/assets/step2-cc4f74eb.png",r="/LGUIDoc/assets/step3-1e8b4e0a.png",n="/LGUIDoc/assets/step4-d01a65a3.png",c="/LGUIDoc/assets/step5-23cfd898.png",l={},i=a('<h1 id="其他一些方法" tabindex="-1"><a class="header-anchor" href="#其他一些方法" aria-hidden="true">#</a> 其他一些方法</h1><p>LTween 提供了一些好用的方法:</p><p><strong>VirtualCall</strong>- 注册 start/update/complete 事件, 设置时长, 然后这些事件就会执行:</p><p><img src="'+o+'" alt=""></p><p><strong>DelayCall</strong>- 延迟一段时间再执行，与引擎自带的 &quot;Delay&quot; 节点作用一样, 不过这个方法是用回调事件的方式. 可能在c++里这个方法会更有用:</p><p><img src="'+p+'" alt=""></p><p><strong>DelayFrameCall</strong>- 延迟几帧再执行:</p><p><img src="'+r+'" alt=""></p><p><strong>RegisterUpdateEvent | UnregisterUpdateEvent</strong>- 注册 &quot;Update&quot; 事件，此事件会每一帧都执行知道取消注册.</p><p><img src="'+n+'" alt=""></p><p><strong>RepeatCall</strong>- 按照给你的时间间隔重复执行多次:</p><p><img src="'+c+'" alt=""></p>',12),_=[i];function g(d,m){return s(),e("div",null,_)}const h=t(l,[["render",g],["__file","index.html.vue"]]);export{h as default};
