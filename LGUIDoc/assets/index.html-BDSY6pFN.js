import{_ as e,c as t,o,a}from"./app-CVfq4vAg.js";const s="/LGUIDoc/assets/1.1-CbaDv6bO.png",r="/LGUIDoc/assets/1.2-DUaMOFuM.png",i="/LGUIDoc/assets/1.3-CdUo5QaI.png",n="/LGUIDoc/assets/1.4-9mJR7jM-.png",l="/LGUIDoc/assets/2.1-DfUUzSBH.png",m="/LGUIDoc/assets/2.2-B63mfOf6.png",c="/LGUIDoc/assets/2.3-6JdJpr3K.png",p="/LGUIDoc/assets/2.4-DVNEFgpx.png",u="/LGUIDoc/assets/3.1-hIdCK1qt.png",d="/LGUIDoc/assets/3.2-BttoJCLp.png",h="/LGUIDoc/assets/3.3-BFwnPdbQ.png",g="/LGUIDoc/assets/3.4-D0MWWYq7.png",U="/LGUIDoc/assets/3.5-mkuzMCUb.png",I="/LGUIDoc/assets/3.6-B8cYJV7D.png",f="/LGUIDoc/assets/3.7-CEuhX_4H.png",_="/LGUIDoc/assets/3.8-BVI19j5_.png",x={},L=a('<h1 id="use-custom-material-for-ui-elements" tabindex="-1"><a class="header-anchor" href="#use-custom-material-for-ui-elements"><span>Use custom material for UI elements</span></a></h1><p>LGUI can use custom material to change the look of our UI elements.<br> Note You should use <strong>Surface</strong> material domain in LGUI&#39;s material, because LGUI is 3d UI, it still need 3d information.</p><h4 id="examples-1-use-a-emissive-material-to-make-our-text-glow" tabindex="-1"><a class="header-anchor" href="#examples-1-use-a-emissive-material-to-make-our-text-glow"><span>Examples 1, use a emissive material to make our text glow.</span></a></h4><p>Note: Glow is a world space post process effect, so only <strong>World Space UE Renderer</strong> can do this, and post process setting must enable glow.</p><ol><li>First of all, copy material <em>LGUI_Base</em> from <em>LGUI Content/ Material</em> folder (You may need to check <em>Show Plugin Content</em> if it is not visible), and paste it to your project content directory.</li><li>Add some nodes to the material like the image below:<br><img src="'+s+'" alt=""></li><li>Since UIText use SDF as default, so we need to check on &quot;Is SDF Font&quot; Switch Param:<br><img src="'+r+'" alt=""></li><li>Select a UIText, and drag the material you just modified to <em>Custom Material</em> slot:<br><img src="'+i+'" alt=""> Now the text should look glow: <img src="'+n+'" alt=""></li></ol><h4 id="example-2-use-texture-to-maskout-our-sprite" tabindex="-1"><a class="header-anchor" href="#example-2-use-texture-to-maskout-our-sprite"><span>Example 2, use texture to maskout our sprite.</span></a></h4><p>Note: UISprite render a UISpriteData. UISpriteData contains the info of a small area from a packed atlas texture.</p><ol><li>First of all, copy material <em>LGUI_Base</em> from <em>LGUI Content/ Material</em> folder (You may need to check <em>Show Plugin Content</em> if it is not visible). And paste it to your project content directory.</li><li>Add some nodes to the material like the image below (note the mask texture&#39;s <em>TexCoord[1]</em>, and don&#39;t forget to select a mask texture for <em>Texture Sample</em> node):<br><img src="'+l+'" alt=""></li><li>Select a UISprite, and drag the material you just modifyed to <em>Custom Material</em> slot:<br><img src="'+m+'" alt=""></li><li>Now the UISprite look not right, because we have not tell LGUI to setup the data for <em>TexCoord[1]</em>. Select LGUICanvas component from WorldSpaceUIRoot actor, in the <em>Additional Shader Channels</em> property, check on <em>UV1</em>.<br><img src="'+c+'" alt=""> Now the result should be good:<br><img src="'+p+'" alt=""> Why use <em>TexCoord[1]</em>? Because LGUI provide a common rect 0-1 range for UISprite in <em>TexCoord[1]</em>. <em>TexCoord[0]</em> is for sprite atlas, which is not 0-1 range.</li></ol><h4 id="example-3-use-lguicanvas-builtin-rectclip-and-textureclip-in-our-custom-material" tabindex="-1"><a class="header-anchor" href="#example-3-use-lguicanvas-builtin-rectclip-and-textureclip-in-our-custom-material"><span>Example 3, use LGUICanvas builtin RectClip and TextureClip in our custom material.</span></a></h4><p>LGUI provide preset material functions <strong>LGUIRectClip</strong> and <strong>LGUITextureClip</strong> for LGUICanvas builtin RectClip and TextureClip, you can find it in &quot;LGUI Content&quot; folder:<br><img src="'+u+'" alt=""> You can use it in any material, the key is use the material function&#39;s result as your Opacity input of material. Let&#39;s start to do it.</p><p>First create a <em>World Space UI - UE Renderer</em>, delete default &quot;Frame&quot; and &quot;Info&quot; node, and create a UISprite actor with name &quot;ClipSprite&quot;, change size to 300x300:<br><img src="'+d+'" alt=""></p><p>Then create our own material like the image beblow:<br><img src="'+h+'" alt=""></p><p>Drag <em>LGUIRectClip</em> node to the material and link it:<br><img src="'+g+'" alt=""></p><p>Select LGUICanvas component from WorldSpaceUIRoot actor, change <em>Clip Type</em> to <em>Rect</em>:<br><img src="'+U+'" alt=""></p><p>Drag the material to &quot;ClipSprite&quot;:<br><img src="'+I+'" alt=""></p><p>Now drag the UISprite actor to the edge of WorldSpaceUIRoot, see it is clipped: <img src="'+f+'" alt=""> texture-clip is the same thing, just repace the <em>LGUIRectClip</em> with node <em>LGUITextureClip</em>: <img src="'+_+'" alt=""></p>',16),b=[L];function C(G,S){return o(),t("div",null,b)}const k=e(x,[["render",C],["__file","index.html.vue"]]),w=JSON.parse('{"path":"/FAQ/CustomMaterial/","title":"Use custom material for UI elements","lang":"en-US","frontmatter":{},"headers":[],"git":{"updatedTime":1685406463000,"contributors":[{"name":"lf2007hf","email":"707908214@qq.com","commits":1}]},"filePathRelative":"FAQ/CustomMaterial/index.md"}');export{k as comp,w as data};
