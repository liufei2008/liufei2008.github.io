import{_ as e,o as t,c as n,a as o}from"./app-6f31cbcb.js";const a="/LGUIDoc/assets/1-52561cb0.png",r={},i=o('<h1 id="lguilifecyclebehaviour" tabindex="-1"><a class="header-anchor" href="#lguilifecyclebehaviour" aria-hidden="true">#</a> LGUILifeCycleBehaviour</h1><p>Since LGUI use a workflow like Unity does, it is recommanded to use LGUILifeCycleBehaviour as base ActorComponent class for most case, espacially in LGUIPrefab.</p><p>When create a Blueprint, typein &quot;LGUILifeCycle&quot; then two class showup, one is LGUILifeCycleBehaviour and the other is LGUILifeCycleUIBehaviour:<br><img src="'+a+'" alt=""> Normally just use LGUILifeCycleBehaviour class, it can fit in most use case. LGUILifeCycleUIBehaviour contains some function/ event just for UI elements.</p><h2 id="lgui-lifecycle-behaviour" tabindex="-1"><a class="header-anchor" href="#lgui-lifecycle-behaviour" aria-hidden="true">#</a> LGUI LifeCycle Behaviour</h2><p>The life cycle functions of LGUILifeCycleBehaviour are managed uniformly by LGUIManagerActor, and the execution sequence is as follows:<br><strong>Awake -&gt; OnEnable -&gt; Start -&gt; Update -&gt; OnDisable -&gt; OnDestroy</strong><br><strong>Awake</strong>: LGUILifeCycleBehaviour is executed once when it is loaded into the scene and the IsUIActive of UIItem is true. If LGUILifeCycleBehaviour is created from Prefab, then <strong>initialization work needs to be placed in Awake (not BeginPlay)</strong>, because Awake will execute after all prefab deserialization work is completed.<br><strong>OnEnable</strong>: Execute when GetIsActiveAndEnable of LGUILifeCycleBehaviour changes from false to true.<br><strong>Start</strong>: Execute Start before the first Update is executed.<br><strong>Update</strong>: When GetIsActiveAndEnable is true, it will be executed once every frame.<br><strong>OnDisable</strong>: Execute when GetIsActiveAndEnable of LGUILifeCycleBehaviour changes from true to false, or execute once before OnDestroy and OnEnable has been executed.<br><strong>OnDestroy</strong>: Execute once when LGUILifeCycleBehaviour is destroyed (EndPlay) and Awake has been executed.<br> Awake/Start/OnDestroy can be executed only once in the whole life cycle, and OnEnable/OnDisalbe/Update may be executed multiple times.<br> GetIsActiveAndEnable: Returns true when IsUIActive of UIItem is true and enable of LGUILifeCycleBehaviour is true.</p><p>Execute order with the UnrealEngine&#39;s built-in life cycle function: BeginPlay -&gt; Awake ... OnDestroy -&gt; EndPlay, the Tick function has nothing to do with the Update function.</p><h3 id="other-functions" tabindex="-1"><a class="header-anchor" href="#other-functions" aria-hidden="true">#</a> Other functions</h3><p><strong>GetRootSceneComponent</strong>: Shotcut and cache for GetOwner-&gt;GetRootComponent.</p><h2 id="lgui-lifecycle-ui-behaviour" tabindex="-1"><a class="header-anchor" href="#lgui-lifecycle-ui-behaviour" aria-hidden="true">#</a> LGUI LifeCycle UI Behaviour</h2><p><strong>OnUIActiveInHierarchy</strong>: Called when RootUIComp IsActiveInHierarchy state is changed. <strong>OnUIDimensionsChanged</strong>: Called when RootUIComp-&gt;AnchorData is changed. <strong>OnUIChildDimensionsChanged</strong>: Called when RootUIComp&#39;s attachchildren-&gt;AnchorData is changed. <strong>OnUIChildAcitveInHierarchy</strong>: Called when RootUIComp&#39;s attachchildren IsActiveInHierarchy state is changed. <strong>OnUIAttachmentChanged</strong>: Called when RootUIComp attach to a new parent. <strong>OnUIChildAttachmentChanged</strong>: Called when RootUIComp&#39;s attachchildren is attached to RootUIComp or detached from RootUIComp. <strong>OnUIInteractionStateChanged</strong>: Called when RootUIComp&#39;s interaction state changed (when UICanvasGroup component allow interaction or not). <strong>OnUIChildHierarchyIndexChanged</strong>: Called when RootUIComp&#39;s attachchildren-&gt;SetHierarchyIndex() is called, usually used for layout to sort children.</p><h3 id="other-functions-1" tabindex="-1"><a class="header-anchor" href="#other-functions-1" aria-hidden="true">#</a> Other functions</h3><p><strong>GetRootUIComponent</strong>: Shotcut and cache for GetOwner-&gt;GetRootComponent-&gt;ConvertTo UIItem</p>',12),c=[i];function s(h,l){return t(),n("div",null,c)}const u=e(r,[["render",s],["__file","index.html.vue"]]);export{u as default};
