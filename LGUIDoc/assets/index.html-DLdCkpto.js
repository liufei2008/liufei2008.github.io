import{_ as t,c as e,o as s,a as o}from"./app-CGRYBoMb.js";const n="/LGUIDoc/assets/step1-Z7hXc80g.png",a="/LGUIDoc/assets/step2-D7_-kfzr.png",p="/LGUIDoc/assets/step3-BW9RbQgR.png",r="/LGUIDoc/assets/step4-C0Ch8Z2o.png",c="/LGUIDoc/assets/step5-DJoYp4dI.png",i={},l=o('<h1 id="其他一些方法" tabindex="-1"><a class="header-anchor" href="#其他一些方法"><span>其他一些方法</span></a></h1><p>LTween 提供了一些好用的方法:</p><p><strong>VirtualCall</strong>- 注册 start/update/complete 事件, 设置时长, 然后这些事件就会执行:</p><p><img src="'+n+'" alt=""></p><p><strong>DelayCall</strong>- 延迟一段时间再执行，与引擎自带的 &quot;Delay&quot; 节点作用一样, 不过这个方法是用回调事件的方式. 可能在c++里这个方法会更有用:</p><p><img src="'+a+'" alt=""></p><p><strong>DelayFrameCall</strong>- 延迟几帧再执行:</p><p><img src="'+p+'" alt=""></p><p><strong>RegisterUpdateEvent | UnregisterUpdateEvent</strong>- 注册 &quot;Update&quot; 事件，此事件会每一帧都执行知道取消注册.</p><p><img src="'+r+'" alt=""></p><p><strong>RepeatCall</strong>- 按照给你的时间间隔重复执行多次:</p><p><img src="'+c+'" alt=""></p>',12),m=[l];function _(g,d){return s(),e("div",null,m)}const u=t(i,[["render",_],["__file","index.html.vue"]]),f=JSON.parse('{"path":"/zh-cn/LTween/Functions/","title":"其他一些方法","lang":"中文","frontmatter":{},"headers":[],"git":{"updatedTime":1685406463000,"contributors":[{"name":"lf2007hf","email":"707908214@qq.com","commits":1}]},"filePathRelative":"zh-cn/LTween/Functions/index.md"}');export{u as comp,f as data};
