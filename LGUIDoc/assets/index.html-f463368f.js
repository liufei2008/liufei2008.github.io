import{_ as e,o as t,c as a,a as o}from"./app-5dd8255c.js";const r="/LGUIDoc/assets/CreateCanvas_1-95c07aa0.png",n="/LGUIDoc/assets/CreateCanvas_2-a51086a1.png",s="/LGUIDoc/assets/CreateCanvas_3-7c7095dc.png",i="/LGUIDoc/assets/CreateCanvas_4-aac298f7.png",c="/LGUIDoc/assets/CreateCanvas_5-ac41fd85.png",p="/LGUIDoc/assets/CreateCanvas_6-8e50bd35.png",h="/LGUIDoc/assets/CreateCanvas_7-89129355.png",l="/LGUIDoc/assets/CreateCanvas_8-9d6a2a21.png",u="/LGUIDoc/assets/CreateCanvas_9-049be12c.png",d="/LGUIDoc/assets/CreateCanvas_10-18761ae9.png",m="/LGUIDoc/assets/CreateCanvas_11-11e4b90d.png",g="/LGUIDoc/assets/CreateCanvas_12-b9430055.png",C="/LGUIDoc/assets/CreateCanvas_13-56f0af80.png",q="/LGUIDoc/assets/CreateCanvas_14-da8f7dcf.png",I="/LGUIDoc/assets/CreateCanvas_15-449ce5c9.png",v={},_=o('<h1 id="lguicanvas" tabindex="-1"><a class="header-anchor" href="#lguicanvas" aria-hidden="true">#</a> LGUICanvas</h1><p>The <strong>LGUICanvas</strong> is the area that all LGUI&#39;s elements should be inside. LGUICanvas is a UIContainerActor with a LGUICanvas component on it, all UI elements must be children of LGUICanvas in hierarchy.</p><h2 id="draw-order-of-elements" tabindex="-1"><a class="header-anchor" href="#draw-order-of-elements" aria-hidden="true">#</a> Draw order of elements</h2><p>All UI elements have property <strong>HierarchyIndex</strong>, which represent the draw order of it. By default a <em>InfoColumn</em> named &quot;LGUI&quot; should appear in <em>Outliner</em> (if not appear, make sure the <strong>Show LGUI column in SceneOutliner</strong> is checked in &quot;LGUI Editor Tools&quot;), when click it the order in <em>Outliner</em> will sorted as LGUI&#39;s definition, which is LGUI&#39;s render order. So UI elements in LGUICanvas are drawn in the same order they appear in the <em>SceneOutliner</em>. The first child is drawn first, the second child next, and so on. If two UI elements overlap, the later one will appear on top of the earlier one.</p><p>To change which element appear on top of other elements, simply reorder the elements in the <em>SceneOutliner</em> by change the <strong>HierarchyIndex</strong> property (directly set the value, or click &quot;+&quot;/&quot;-&quot; button beside it). The order can also be controlled from scripting by using these methods on the UIItem component: <strong>SetAsFirstHierarchy</strong>, <strong>SetAsLastHierarchy</strong>, and <strong>SetHierarchyIndex</strong>.</p><p>There is a <strong>SortOrder</strong> property on LGUICanvas, which always have greater priority then HierarchyIndex. If you want to change it, simply check <strong>OverrideSorting</strong> property and set the value. The <strong>SortOrder</strong> can also be controlled from scripting by using these methods on LGUICanvas component: <strong>SetSortOrderToHighestOfHierarchy</strong>, <strong>SetSortOrderToLowestOfHierarchy</strong>, and <strong>SetSortOrder</strong>.</p><h2 id="create-a-lguicanvas" tabindex="-1"><a class="header-anchor" href="#create-a-lguicanvas" aria-hidden="true">#</a> Create a LGUICanvas</h2><p>LGUICanvas must stay on a actor which have a UIItem as RootComponent, UIContainer actor is good to use. Create a new empty level, drag a UIContainerActor to viewport: <img src="'+r+'" alt=""></p><p>Rename the UIContainer to &quot;RootCanvas&quot;, set the &quot;LGUI Transform&quot; parameters like this (Width: 1280, Height: 720): <img src="'+n+'" alt=""></p><p>Add a LGUICanvas component to &quot;RootCanvas&quot;, notice a icon and a text &quot;0&quot; appear beside &quot;RootCanvas&quot; in Outliner: <img src="'+s+'" alt=""> Move your mouse over the icon, a tooltip will appear: <img src="'+i+'" alt=""></p><p>Right click on the down arrow button right beside &quot;RootCanvas&quot; and choose &quot;Create UI Element&quot;-&gt;&quot;UISprite&quot;: <img src="'+c+'" alt=""></p><p>A new UISpriteActor will be created, see a green rectangle appear in viewport, and number of drawcall become 1 in &quot;RootCanvas&quot;. Rename the UISpriteActor to &quot;Sprite&quot;: <img src="'+p+'" alt=""></p><p>Right click on the down arrow button right beside &quot;RootCanvas&quot; and choose &quot;Create UI Element&quot;-&gt;&quot;UIText&quot;: <img src="'+h+'" alt=""></p><p>Rename the UITextActor to &quot;Text&quot;, &quot;Color&quot; to black. See &quot;New Text&quot; appear on viewport, and drawcall count become 2: <img src="'+l+'" alt=""></p><h2 id="use-rect-clip" tabindex="-1"><a class="header-anchor" href="#use-rect-clip" aria-hidden="true">#</a> Use rect clip</h2><p>Select &quot;Sprite&quot;, change width to 1920, height to 1080, see the white rectangle exceed canvas area: <img src="'+u+'" alt=""></p><p>Select LGUICanvas component from &quot;RootCanvas&quot; actor, change &quot;Clip Type&quot; to &quot;Rect&quot;, see the Sprite being clipped by canvas&#39;s rect area: <img src="'+d+'" alt=""></p><p><strong>LGUICanvas support hierarchy nested RectClip</strong><br> Lets add a sub canvas: create a UIContainer, name it &quot;SubCanvas&quot;, add a LGUICanvas component to it. Then drag &quot;Sprite&quot; and &quot;Text&quot; to &quot;SubCanvas&quot; as children, now the hierarchy should be like this: <img src="'+m+'" alt=""></p><p>Select LGUICanvas component on &quot;SubCanvas&quot;, click on &quot;Override Parameters&quot; and check on &quot;Clip Type&quot;, then &quot;Clip Type&quot; parameter will appear. Since the default parameter is &quot;No Clip&quot;, the while area of &quot;Sprite&quot; is fully appear without clip effect: <img src="'+g+'" alt=""></p><p>Select LGUICanvas component on &quot;SubCanvas&quot;, change &quot;Clip Type&quot; to &quot;Rect Clip&quot;, then select UIItem component and change with to 640 height to 360: <img src="'+C+'" alt=""> <img src="'+q+'" alt=""></p><p>Drag the &quot;SubCanvas&quot; around to see the clip effect: <img src="'+I+'" alt=""></p>',21),U=[_];function f(w,L){return t(),a("div",null,U)}const b=e(v,[["render",f],["__file","index.html.vue"]]);export{b as default};
