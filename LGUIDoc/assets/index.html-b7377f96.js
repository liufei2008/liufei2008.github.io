import{_ as t,o,c as e,a}from"./app-9c9cdfad.js";const s="/LGUIDoc/assets/1-8e440d98.png",n="/LGUIDoc/assets/2-1201b187.png",r="/LGUIDoc/assets/3-e66e299f.png",u="/LGUIDoc/assets/4-9b0d4bef.png",i="/LGUIDoc/assets/5-796ef7de.png",c="/LGUIDoc/assets/6-ca9f9a76.png",d="/LGUIDoc/assets/7-6712b49a.png",p="/LGUIDoc/assets/8-c82c602c.png",q="/LGUIDoc/assets/9-346a8bf8.png",l="/LGUIDoc/assets/10-a2e1ee29.png",m="/LGUIDoc/assets/11-c5415419.png",h="/LGUIDoc/assets/12-ef99fa25.png",b={},f=a('<h1 id="get-actor-or-component-inside-prefab" tabindex="-1"><a class="header-anchor" href="#get-actor-or-component-inside-prefab" aria-hidden="true">#</a> Get actor or component inside prefab</h1><p>This is for someone who may not famaliar with prefab workflow.</p><p>We create a UI prefab with name &quot;TestPrefab&quot;, inside the prefab should be like this:<br><img src="'+s+'" alt=""><br> &quot;Root&quot; is a UIContainer actor, &quot;Button&quot; is attached to &quot;Root&quot; and &quot;Text&quot; is attached to &quot;Button&quot;. If we want to modify &quot;Text&quot; object, how to get a reference of it? There are two ways to do it, lets do it step by step.</p><p>First we should load the prefab, so create a ActorComponent with name &quot;PrefabLoader&quot;, then link &quot;LoadPrefab&quot; node to &quot;BeginPlay&quot;, and assign our prefab &quot;TestPrefab&quot; to it, this means prefab will be loaded when hit play:<br><img src="'+n+'" alt=""></p><h2 id="use-actorcomponent-as-mediator" tabindex="-1"><a class="header-anchor" href="#use-actorcomponent-as-mediator" aria-hidden="true">#</a> Use ActorComponent as mediator</h2><p>Create another ActorComponent, this time we use LGUILifeCycleBehaviour as base class, name the component &quot;Mediator&quot;:<br> (it is recommanded to use LGUILifeCycleBehaviour in prefab)<br><img src="'+r+'" alt=""></p><p>Add a variable with type &quot;UITextActor&quot;, name &quot;Text&quot;, and check on &quot;Instance Editable&quot;:<br><img src="'+u+'" alt=""></p><p>Open &quot;TestPrefab&quot; and drag &quot;Mediator&quot; to &quot;Root&quot; actor&#39;s component stack:<br><img src="'+i+'" alt=""></p><p>Select &quot;Mediator&quot; component on &quot;Root&quot; actor, check on the lock button on &quot;Details&quot; panel, then drag &quot;Text&quot; actor to the variable &quot;Text&quot;:<br><img src="'+c+'" alt=""></p><p>After apply the prefab, the variable &quot;Text&quot; should successfully save the actor reference.</p><p>Open &quot;PrefabLoader&quot; component, drag out &quot;Return Value&quot; from &quot;Load Prefab&quot; node and select &quot;Get Component by Class&quot; node, and select &quot;Mediator&quot; in &quot;Component Class&quot;:<br><img src="'+d+'" alt=""></p><p>Drag out &quot;Return Value&quot; from &quot;Get Component by Class&quot; node, then you will find the &quot;Text&quot; variable, this is the &quot;Text&quot; actor reference, just do what you need with it:<br><img src="'+p+'" alt=""></p><h2 id="findchildbydisplayname" tabindex="-1"><a class="header-anchor" href="#findchildbydisplayname" aria-hidden="true">#</a> FindChildByDisplayName</h2><p>In your &quot;PrefabLoader&quot;, drag out &quot;Return Value&quot; from &quot;Load Prefab&quot; node and cast it to &quot;UIBaseActor&quot;:<br><img src="'+q+'" alt=""></p><p>Drag out &quot;As UIBase Actor&quot; and select &quot;Get UIItem&quot; node:<br><img src="'+l+'" alt=""></p><p>Drag out &quot;Return Value&quot; from &quot;Get UIItem&quot; node and select &quot;Find Child by Display Name&quot; node, typein &quot;Button/Text&quot; in &quot;In Name&quot; parameter:<br><img src="'+m+'" alt=""></p><p>Drag out &quot;Return Value&quot; from &quot;Find Child by Display Name&quot; node and cast it to &quot;UIText&quot;:<br><img src="'+h+'" alt=""></p><p>The &quot;As UIText&quot; is the object you need. <strong>NOTE</strong> &quot;FindChildByDisplayName&quot; can only work with LGUI&#39;s UI element, because other type of actor don&#39;t have persistent &quot;DisplayName&quot;. You can find details in <a href="../FindChildByDisplayName">this</a>.</p>',18),_=[f];function g(y,I){return o(),e("div",null,_)}const D=t(b,[["render",g],["__file","index.html.vue"]]);export{D as default};
