import{_ as e,o as t,c as o,e as r}from"./app-9e451604.js";const a="/LPrefabDoc/assets/1-d31b8478.png",n="/LPrefabDoc/assets/2-e30a53d4.png",s="/LPrefabDoc/assets/3-753e04ed.png",i="/LPrefabDoc/assets/4-f9a6402e.png",c={},l=r('<h1 id="lprefabinterface" tabindex="-1"><a class="header-anchor" href="#lprefabinterface" aria-hidden="true">#</a> LPrefabInterface</h1><p>This interface provide <strong>Awake</strong> function for Actor and ActorComponent, and the <strong>Awake</strong> will be called right after the prefab finish deserialize.<br> Open a blueprint Actor or ActorComponent, click on &quot;Class Settings&quot;, in the &quot;Implemented Interfaces&quot; area click &quot;Add&quot; button and typein <em>LPrefabInterface</em>: <img src="'+a+'" alt=""> Then two functions will appear on &quot;Interfaces&quot; area:<br><strong>Awake</strong>: Called when LGUIPrefab finish load. This is called late than BeginPlay. <strong>EditorAwake</strong>: Same as <em>Awake</em> function but only execute in edit mode. <img src="'+n+'" alt=""> Normally we use &quot;BeginPlay&quot; to do initialization, but when use prefab we need to use &quot;Awake&quot; instead, so is there any way to use them together? The answer is yes, just link nodes like this: <img src="'+s+'" alt=""> The <strong>Is LPrefab System Processing Actor</strong> is a node provided by LPrefab, that can tell use if the prefab system is still processing the actor, if true then we can use <strong>Awake</strong> to do the initialize work, otherwise use <strong>BeginPlay</strong>.<br><br></p><h2 id="execute-order-in-lprefab" tabindex="-1"><a class="header-anchor" href="#execute-order-in-lprefab" aria-hidden="true">#</a> Execute order in LPrefab</h2><p><strong>Awake</strong> &amp; <strong>Tick</strong> execute order in prefab:</p><ul><li>Higher in hierarchy will execute earlier, so scripts on root actor will execute the first, and scripts on lowest actor will execute the last.</li><li>We can use actor label to control the execute order. Check the screen-shot-image blow, activate &quot;Item Label&quot; as sorting rule, the execute order is from top to bottom as &quot;RootActor-&gt;1-&gt;2-&gt;3-&gt;4&quot;.<br><img src="'+i+'" alt=""></li><li>Actor execute first, then execute on component.</li><li><strong>Tick</strong> also follow the same principle.</li></ul>',5),u=[l];function h(d,f){return t(),o("div",null,u)}const p=e(c,[["render",h],["__file","index.html.vue"]]);export{p as default};
