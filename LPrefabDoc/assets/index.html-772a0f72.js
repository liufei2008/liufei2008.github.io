import{_ as s,r as i,o as c,c as l,a as e,b as t,d as r,w as n,e as a}from"./app-9e451604.js";const d="/LPrefabDoc/assets/CreatePrefabInLevelEditor_1-64a2f67c.png",h="/LPrefabDoc/assets/CreatePrefabInLevelEditor_2-0778c318.png",f="/LPrefabDoc/assets/CreatePrefabInLevelEditor_3-15349693.png",p="/LPrefabDoc/assets/CreatePrefabInLevelEditor_4-9b88fb57.png",b="/LPrefabDoc/assets/CreatePrefabInLevelEditor_5-a113890b.png",u="/LPrefabDoc/assets/CreatePrefabInContentBrowser_1-50b32dc8.png",m="/LPrefabDoc/assets/CreatePrefabInContentBrowser_2-ab900c54.png",P="/LPrefabDoc/assets/CreatePrefabInContentBrowser_3-79fb1bc0.png",g="/LPrefabDoc/assets/CreatePrefabInContentBrowser_4-e560262a.png",w="/LPrefabDoc/assets/CreatePrefabInContentBrowser_5-d2293c1f.png",_="/LPrefabDoc/assets/CreatePrefabInContentBrowser_6-328aaffc.png",y="/LPrefabDoc/assets/PrefabEditor_1-6530b0b7.png",L="/LPrefabDoc/assets/PrefabEditor_2-146271e8.png",q="/LPrefabDoc/assets/PrefabEditor_3-3aeddeac.png",v="/LPrefabDoc/assets/PrefabEditor_4-54bbfa33.png",C="/LPrefabDoc/assets/PrefabEditor_5-4f69a381.png",A="/LPrefabDoc/assets/LevelEditor_1-d7899339.png",D="/LPrefabDoc/assets/LevelEditor_2-e70e3453.png",E="/LPrefabDoc/assets/RuntimeUse_1-0288d842.png",k="/LPrefabDoc/assets/RuntimeUse_2-3c5a6324.png",B="/LPrefabDoc/assets/RuntimeUse_3-8f6b4b71.png",T="/LPrefabDoc/assets/1-d31b8478.png",x="/LPrefabDoc/assets/RuntimeUse_5-4367e5fc.png",I="/LPrefabDoc/assets/RuntimeUse_6-8e6bc724.png",R="/LPrefabDoc/assets/RuntimeUse_7-887ff04a.png",N="/LPrefabDoc/assets/RuntimeUse_8-790f07f9.png",U="/LPrefabDoc/assets/RuntimeUse_9-ee726b11.png",S="/LPrefabDoc/assets/RuntimeUse_10-11110082.png",M="/LPrefabDoc/assets/RuntimeUse_11-8a126777.png",z="/LPrefabDoc/assets/RuntimeUse_12-724c8b56.png",O="/LPrefabDoc/assets/RuntimeUse_13-461890a5.png",j="/LPrefabDoc/assets/NestedPrefab_1-add2a566.png",V="/LPrefabDoc/assets/NestedPrefab_2-06daf0f7.png",W="/LPrefabDoc/assets/NestedPrefab_3-9d3c33a5.png",F="/LPrefabDoc/assets/NestedPrefab_4-b9a93cfe.png",G={},H=a('<h1 id="lprefab-lex-prefab" tabindex="-1"><a class="header-anchor" href="#lprefab-lex-prefab" aria-hidden="true">#</a> LPrefab (Lex Prefab)</h1><p>Prefabs are collections of actors that can be stored in an asset and restore them into level.</p><p>Quite often when constructing a level you want to create some arrangement of actors, and then re-use that collection in the same or other levels. An example might be a torch, which consists of some static meshes, some lights, flame particle effectd, and even scripts. Prefabs allows you to create this kind of collection once, and then save it in as a Prefab asset. You can then select the Prefab in the Content Browser, and add it many times through the level.</p><p>Prefabs can have changes made to them in a level, and those changes can then be propagated to all existing instances of that Prefab. Because this uses Unreal&#39;s property system, only properties still at their original prefab defaults will be updated when the Prefab changes. For example, imagine you have a Prefab that contains a yellow light, and you then change one instance of the Prefab to have a blue light. Then you change the Prefab itself to have a green light. Only instances who&#39;s light is still yellow will have the color changed to green. This is very useful, as it allows you modify, or even remove, parts of a Prefab instance to make it fit a particular usage, but also receive updates to the Prefab.</p><h2 id="create-a-prefab" tabindex="-1"><a class="header-anchor" href="#create-a-prefab" aria-hidden="true">#</a> Create a Prefab</h2><p>There are two ways to create a Prefab, lets try it by creating a torch Prefab.</p><h3 id="create-prefab-in-level-editor" tabindex="-1"><a class="header-anchor" href="#create-prefab-in-level-editor" aria-hidden="true">#</a> Create Prefab in Level Editor</h3><p>Create a simple torch and attach these actors to a single root actor in the level, the torch is just constructed by 2 cubes + 1 cylinder + 4 point lights:<br><img src="'+d+'" alt=""> Then select the root actor, right-click on LPrefab column and choose <strong>Create Prefab</strong> from the context menu.<br><img src="'+h+'" alt=""> Then a dialog window will show, you can choose a place and name to save the asset:<br><img src="'+f+'" alt=""> Click &quot;Save&quot; and then a Prefab asset will appear in content folder, and the actors of this prefab will show &quot;Prefab&quot; icon on the LPrefab column:<br><img src="'+p+'" alt=""> Now we can delete the actors in level. Right-click on LPrefab column of root actor and choose &quot;Destroy Actors&quot;:<br><img src="'+b+'" alt=""></p><h3 id="create-prefab-in-content-browser" tabindex="-1"><a class="header-anchor" href="#create-prefab-in-content-browser" aria-hidden="true">#</a> Create Prefab in Content Browser</h3><p>Right-click on Content Browser and select LPrefab: <img src="'+u+'" alt=""> Then a popup window will appear, in this window we can select a type of Actor as the root actor of the Prefab. Just choose the default empty &quot;Actor&quot;: <img src="'+m+'" alt=""> Then a Prefab asset will be created in Content Browser, name it &quot;Torch&quot;: <img src="'+P+'" alt=""> Double click the &quot;Torch&quot; Prefab asset, this will open a Prefab Editor window for us to edit the newly created &quot;Torch&quot; Prefab: <img src="'+g+'" alt=""> Now we can add shapes and lights to our &quot;Torch&quot;, by right click on LPrefab column and click to create these items: <img src="'+w+'" alt=""> After you finish create the &quot;Torch&quot;, hit &quot;Apply&quot; button to save the Prefab: <img src="'+_+'" alt=""> Now you can close the Prefab Editor window.</p><h2 id="edit-prefab" tabindex="-1"><a class="header-anchor" href="#edit-prefab" aria-hidden="true">#</a> Edit Prefab</h2><p>There are two ways to eidt/modify existing prefabs.</p><h3 id="edit-prefab-in-prefab-editor" tabindex="-1"><a class="header-anchor" href="#edit-prefab-in-prefab-editor" aria-hidden="true">#</a> Edit Prefab in Prefab-Editor</h3><p>Just double-click the Prefab asset and will bring-up a Prefab-Editor window: <img src="'+y+'" alt=""><em>LPrefab will automatically create a root actor named &quot;[temporary_RootAgent]&quot;, as the name means this actor is temporary created just as a root holder.</em><br> In the Prefab-Editor window, you can do anything you want to edit/modify the prefab. Lets edit something for example.</p><p>Select &quot;Cube&quot; actor and right-click on LPrefab column then select &quot;Create Actor&quot;-&gt;&quot;All Actors&quot; then typein &quot;StaticMesh&quot;, this will create a StaticMeshActor under &quot;Cube&quot; actor:<br><img src="'+L+'" alt=""><img src="'+q+'" alt=""> Rename the actor to &quot;Sphere&quot; and assign a sphere static mesh to it:<br><img src="'+v+'" alt=""></p><p>Now the important part, click-on &quot;Apply&quot; button on the left-top size of the editor window:<br><img src="'+C+'" alt=""></p><p>The &quot;Apply&quot; button will save your changed properties to Prefab asset, so always rememeber to hit it.</p>',17),J=a('<h3 id="edit-prefab-in-level-editor" tabindex="-1"><a class="header-anchor" href="#edit-prefab-in-level-editor" aria-hidden="true">#</a> Edit Prefab in Level-Editor</h3><p>Drag your Prefab asset and drop it in Level-Editor&#39;s viewport, this will create an instance of the Prefab asset: <img src="'+A+'" alt=""><em>Note, if you select an actor in Level-Editor then drag-drop the Prefab, then the created Prefab instance will attach to the selected actor.</em></p><p>When edit a Prefab instance in Level-Editor, LPrefab actually consider it as a Sub-Prefab, so features and limititions are same, see <em>Nested Prefab and Property Override</em> section below.</p><h3 id="delete-prefab-in-level-editor" tabindex="-1"><a class="header-anchor" href="#delete-prefab-in-level-editor" aria-hidden="true">#</a> Delete Prefab in Level-Editor</h3><p>Select the root actor of your Prefab instance in Level-Editor, then right click on LPrefab column in outliner, and click &quot;Destroy Actors&quot;:<br><img src="'+D+'" alt=""></p><p><strong>NOTE!!! The &quot;Destroy Actors&quot; can destroy selected actors with it&#39;s attached children actors.</strong></p><h2 id="use-prefab-at-runtime" tabindex="-1"><a class="header-anchor" href="#use-prefab-at-runtime" aria-hidden="true">#</a> Use Prefab at runtime</h2><p>LPrefab provide a some function to load it at runtime, you can easily call it in Blueprint and c++: <img src="'+E+'" alt=""><strong>LoadPrefab</strong>: Most commonly used function</p><ul><li>InParent: Provide a SceneComponent as parent, so the loaded Prefab&#39;s root actor will attach to the parent.</li><li>SetRelativeTransformToIdentity: true- Reset the loaded Prefab&#39;s root actor&#39;s transform value; false- Keep origin value. <strong>LoadPrefabWithTransform</strong>: Replace the loaded Prefab&#39;s root actor&#39;s transform value with provided one.<br><strong>LoadPrefabWithReplacement</strong>: This function give us an opportunity to replace the Prefab&#39;s referenced assets or class before load the Prefab. Useful in the case that, we create a PrefabA, and a component CompA at the root actor to manage the PrefabA, then we create a CompB which have the same properties as CompA, but with different function implementation, then we can use this function to load PrefabA and replace class from CompA to CompB; But remember, Prefab serialize depend on UProperty, so CompA and CompB must have same UProperty.</li><li>InReplaceAssetMap: Map from asset to another, maybe a static mesh.</li><li>InReplaceClassMap: Map from class to another, in the above example, we can map CompA to CompB.</li></ul><p>Lets have a test. Create a ActorBlueprint with name &quot;TestLoad&quot;, open it in BlueprintEditor, add variable with name &quot;Prefab&quot; and type &quot;LPrefab&quot;, assign the Prefab asset we just created above, link the node like the shot: <img src="'+k+'" alt=""> Now drag the actor &quot;TestLoad&quot; to LevelEditor&#39;s viewport then hit play, you will see the Prefab is successfully loaded and attach to &quot;TestLoad&quot; actor: <img src="'+B+'" alt=""></p><h3 id="initialize-when-load-prefab-at-runtime" tabindex="-1"><a class="header-anchor" href="#initialize-when-load-prefab-at-runtime" aria-hidden="true">#</a> Initialize when load Prefab at runtime</h3><p>LPrefab use it&#39;s own serialization policy and it is late than &quot;BeginPlay&quot; execution, so properties are not ready when &quot;BeginPlay&quot;, so a replacement for &quot;BeginPlay&quot; must use to do the initialization job.<br> LPrefab provide a way to achieve this:</p>',12),K=e("strong",null,"LPrefabInterface",-1),Y=a('<p>Lets have a test. Create a ActorComponent with name &quot;TestInitialize&quot;, open it in BlueprintEditor, click on &quot;Class Settings&quot;, in the &quot;Implemented Interfaces&quot; area click &quot;Add&quot; button and typein <em>LPrefabInterface</em>: <img src="'+T+'" alt=""> Double click on &quot;Awake&quot; interface function, then drag out from &quot;Event Awake&quot; and link a &quot;PrintString&quot; node: <img src="'+x+'" alt=""> Double click on your Prefab asset to open Prefab-Editor, and drag TestInitialize component to any actor in prefab, then hit &quot;Apply&quot;: <img src="'+I+'" alt=""> Now hit play and you will see printed info right after the Prefab is loaded.</p><h3 id="delete-prefab-instance-at-runtime" tabindex="-1"><a class="header-anchor" href="#delete-prefab-instance-at-runtime" aria-hidden="true">#</a> Delete Prefab instance at runtime</h3><p>Prefab instance is just a collection of actors, so all we need to do is delete these actors. LPrefab provide a simple function to do it &quot;Destroy Actor with Hierarchy&quot;, just use it with the loaded prefab&#39;s root actor: <img src="'+R+'" alt=""></p><h3 id="get-actors-or-components-inside-prefab-after-load-it" tabindex="-1"><a class="header-anchor" href="#get-actors-or-components-inside-prefab-after-load-it" aria-hidden="true">#</a> Get Actors or Components inside Prefab after load it</h3><p>Unlike Blueprint, Blueprint is script-class but Prefab is a collection of asset. In Prefab workflow, you need a script to get references to the Objects inside Prefab (Actors or Components or other type of UObjects).<br> For example, we have a Torch Prefab, and we want to get the PointLight actor:<br><img src="'+N+'" alt=""> Create a ActorComponent, and name it &quot;MediatorComponent&quot;, click to open it in BlueprintEditor:<br><img src="'+U+'" alt=""> Add a variable with name &quot;PointLight&quot; and type &quot;PointLight&quot; Actor, check on InstanceEditable:<br><img src="'+S+'" alt=""> Drag MediatorComponent to the root Actor of Torch Prefab, then assign the PointLight Actor to the MedatorComponent&#39;s PointLight variable:<br><img src="'+M+'" alt=""> Now we can load the Prefab. Create another ActorComponent and name it &quot;LoadPrefabComponent&quot;, click to open it in BlueprintEditor, and use LoadPrefab node at BeginPlay:<br><img src="'+z+'" alt=""> At the ReturnValue of LoadPrefab, we can get the root Actor which is the Torch Actor with component MediatorComponent, so we can get the PointLight through the MediatorComponent:<br><img src="'+O+'" alt=""> Now we get the PointLight, we can do whatever we want with it.<br> The MediatorComponent is act as a &quot;mediator&quot;, we can use it to get parameters inside Prefab.</p><h2 id="nested-prefab-and-property-override" tabindex="-1"><a class="header-anchor" href="#nested-prefab-and-property-override" aria-hidden="true">#</a> Nested Prefab and Property Override</h2><p>Nested Prefab means you can include Prefab instances inside other Prefabs. Nested Prefabs retain their links to their own Prefab Assets, while also forming part of another Prefab Asset.<br> How to create a nested Prefab? This is simple, double click on Prefab asset to open a Prefab-Editor, click a actor to select it as parent, then drag another prefab to the Prefab-Editor&#39;s viewport, then you will find a instance of Prefab is created inside Prefab-Editor: <img src="'+j+'" alt=""> Prefab can maintain it&#39;s default property, and track changed property values for later <em>Apply</em> or <em>Revert</em>. For example, if I change the light color to red: <img src="'+V+'" alt=""> Goto Sub-Prefab&#39;s root Actor and right click LPrefab column in outliner, you will find &quot;Prefab Override Properties&quot;, click it and you can see the modified property: <img src="'+W+'" alt=""> You can <em>Revert</em> the modified property to Sub-Prefab&#39;s default value, or <em>Apply</em> the value to change the Sub-Prefab&#39;s default value.</p><p>There are some limitations when edit Sub-Prefab:</p><ul><li>Can&#39;t delete or remove Actor.</li><li>Can&#39;t delete or remove ActorComponent.</li><li>Can&#39;t change Actor&#39;s attachement.</li></ul><p>If we try to attach a actor to another, a message will showup to prevent it: <img src="'+F+'" alt=""></p><p><strong>KNOW LIMITATION</strong></p><ul><li>Prefab is base on actor hierarchy, actor types which can&#39;t be attached to other actor are not supported. (BSP Brush/Group Actor/Landscape).</li><li>Actor-Blueprint is not good with Prefab&#39;s workflow. The reason is that, Actor-Blueprint alway re-run construction when any of it&#39;s properties changed (even drag-move), makes it impossible to track properties changes.</li></ul>',12);function Q(X,Z){const o=i("RouterLink");return c(),l("div",null,[H,e("p",null,[t("See "),r(o,{to:"/PrefabEditor/"},{default:n(()=>[t("PrefabEditor")]),_:1})]),J,e("ul",null,[e("li",null,[r(o,{to:"/PrefabInterface/"},{default:n(()=>[K]),_:1}),t(": Both Actor and ActorComponent can implement this interface.")])]),Y])}const ee=s(G,[["render",Q],["__file","index.html.vue"]]);export{ee as default};
