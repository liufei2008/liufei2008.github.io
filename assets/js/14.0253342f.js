(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{215:function(t,e,a){t.exports=a.p+"assets/img/1.a7e87bb7.png"},216:function(t,e,a){t.exports=a.p+"assets/img/2.6e996d9c.png"},217:function(t,e,a){t.exports=a.p+"assets/img/3.16589815.png"},218:function(t,e,a){t.exports=a.p+"assets/img/4.5a54e6f0.png"},219:function(t,e,a){t.exports=a.p+"assets/img/5.f66b55df.png"},220:function(t,e,a){t.exports=a.p+"assets/img/6.32c1f0d7.png"},221:function(t,e,a){t.exports=a.p+"assets/img/7.55017486.png"},222:function(t,e,a){t.exports=a.p+"assets/img/8.334b602d.png"},223:function(t,e,a){t.exports=a.p+"assets/img/9.fd7ce972.png"},224:function(t,e,a){t.exports=a.p+"assets/img/10.bf268b33.png"},225:function(t,e,a){t.exports=a.p+"assets/img/11.b33f1173.png"},226:function(t,e,a){t.exports=a.p+"assets/img/12.21164775.png"},573:function(t,e,a){"use strict";a.r(e);var o=[function(){var t=this,e=t._self._c;return e("div",{staticClass:"content"},[e("h1",{attrs:{id:"get-actor-or-component-inside-prefab"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#get-actor-or-component-inside-prefab"}},[t._v("#")]),t._v(" Get actor or component inside prefab")]),t._v(" "),e("p",[t._v("This is for someone who may not famaliar with prefab workflow.")]),t._v(" "),e("p",[t._v('We create a UI prefab with name "TestPrefab", inside the prefab should be like this:'),e("br"),t._v(" "),e("img",{attrs:{src:a(215),alt:""}}),e("br"),t._v('\n"Root" is a UIContainer actor, "Button" is attached to "Root" and "Text" is attached to "Button".\nIf we want to modify "Text" object, how to get a reference of it?\nThere are two ways to do it, lets do it step by step.')]),t._v(" "),e("p",[t._v('First we should load it with a ActorComponent, so create a ActorComponent with name "PrefabLoader", then link "LoadPrefab" node to "BeginPlay", and assign our prefab "TestPrefab" to it, this means prefab will be loaded when hit play:'),e("br"),t._v(" "),e("img",{attrs:{src:a(216),alt:""}})]),t._v(" "),e("h2",{attrs:{id:"use-actorcomponent-as-mediator"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#use-actorcomponent-as-mediator"}},[t._v("#")]),t._v(" Use ActorComponent as mediator")]),t._v(" "),e("p",[t._v('Create another ActorComponent, this time we use LGUILifeCycleBehaviour as base class, name the component "Mediator":'),e("br"),t._v("\n(it is recommanded to use LGUILifeCycleBehaviour in prefab)"),e("br"),t._v(" "),e("img",{attrs:{src:a(217),alt:""}})]),t._v(" "),e("p",[t._v('Add a variable with type "UITextActor", name "Text", and check on "Instance Editable":'),e("br"),t._v(" "),e("img",{attrs:{src:a(218),alt:""}})]),t._v(" "),e("p",[t._v('Open "TestPrefab" and drag "Mediator" to "Root" actor:'),e("br"),t._v(" "),e("img",{attrs:{src:a(219),alt:""}})]),t._v(" "),e("p",[t._v('Select "Mediator" component on "Root" actor, check on the lock button on "Details" panel, then drag "Text" actor to the variable "Text":'),e("br"),t._v(" "),e("img",{attrs:{src:a(220),alt:""}})]),t._v(" "),e("p",[t._v('After apply the prefab, the variable "Text" should successfully save the actor reference.')]),t._v(" "),e("p",[t._v('Open "PrefabLoader" component, drag out "Return Value" from "Load Prefab" node and select "Get Component by Class" node, and select "Mediator" in "Component Class":'),e("br"),t._v(" "),e("img",{attrs:{src:a(221),alt:""}})]),t._v(" "),e("p",[t._v('Drag out "Return Value" from "Get Component by Class" node, then you will find the "Text" variable, this is the "Text" actor reference, just do what you need with it:'),e("br"),t._v(" "),e("img",{attrs:{src:a(222),alt:""}})]),t._v(" "),e("h2",{attrs:{id:"findchildbydisplayname"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#findchildbydisplayname"}},[t._v("#")]),t._v(" FindChildByDisplayName")]),t._v(" "),e("p",[t._v('In your "PrefabLoader", drag out "Return Value" from "Load Prefab" node and cast it to "UIBaseActor":'),e("br"),t._v(" "),e("img",{attrs:{src:a(223),alt:""}})]),t._v(" "),e("p",[t._v('Drag out "As UIBase Actor" and select "Get UIItem" node:'),e("br"),t._v(" "),e("img",{attrs:{src:a(224),alt:""}})]),t._v(" "),e("p",[t._v('Drag out "Return Value" from "Get UIItem" node and select "Find Child by Display Name" node, typein "Button/Text" in "In Name" parameter:'),e("br"),t._v(" "),e("img",{attrs:{src:a(225),alt:""}})]),t._v(" "),e("p",[t._v('Drag out "Return Value" from "Find Child by Display Name" node and cast it to "UIText":'),e("br"),t._v(" "),e("img",{attrs:{src:a(226),alt:""}})]),t._v(" "),e("p",[t._v('The "As UIText" is the object you need.\n'),e("strong",[t._v("NOTE")]),t._v(' "FindChildByDisplayName" can only work with LGUI\'s UI element.')])])}],s=a(0),n=Object(s.a)({},(function(){this._self._c;return this._m(0)}),o,!1,null,null,null);e.default=n.exports}}]);